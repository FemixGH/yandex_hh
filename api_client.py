#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å FastAPI –±—ç–∫–µ–Ω–¥–æ–º –ò–ò –ë–∞—Ä–º–µ–Ω–∞
"""

import requests
import json
from typing import Dict, List, Optional, Any
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

class BartenderAPIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API –ò–ò –ë–∞—Ä–º–µ–Ω–∞"""

    def __init__(self, base_url: str = "http://localhost:8000", timeout: int = 30):
        self.base_url = base_url.rstrip('/')
        self.timeout = timeout
        self.session = requests.Session()

    def _make_request(self, method: str, endpoint: str, **kwargs) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ API"""
        url = f"{self.base_url}{endpoint}"

        try:
            response = self.session.request(
                method=method,
                url=url,
                timeout=self.timeout,
                **kwargs
            )
            response.raise_for_status()
            return response.json()

        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {url}: {e}")
            raise

    def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
        return self._make_request("GET", "/health")

    def ask_bartender(self, query: str, user_id: Optional[str] = None,
                     k: int = 3, with_moderation: bool = True) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞—Ä–º–µ–Ω—Å–∫–æ–º—É –ò–ò"""
        data = {
            "query": query,
            "k": k,
            "with_moderation": with_moderation
        }
        if user_id:
            data["user_id"] = user_id

        return self._make_request("POST", "/bartender/ask", json=data)

    def check_moderation(self, text: str, is_input: bool = True) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞"""
        data = {
            "text": text,
            "is_input": is_input
        }
        return self._make_request("POST", "/moderation/check", json=data)

    def create_embedding(self, text: str, model_uri: Optional[str] = None) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞"""
        data = {"text": text}
        if model_uri:
            data["model_uri"] = model_uri

        return self._make_request("POST", "/embeddings/create", json=data)

    def semantic_search(self, query: str, k: int = 5, threshold: float = 0.5) -> Dict[str, Any]:
        """–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ"""
        data = {
            "query": query,
            "k": k,
            "threshold": threshold
        }
        return self._make_request("POST", "/search/semantic", json=data)

    def get_index_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞"""
        return self._make_request("GET", "/index/status")

    def rebuild_index(self, bucket: str, prefix: str = "", force: bool = False) -> Dict[str, Any]:
        """–ü–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞"""
        data = {
            "bucket": bucket,
            "prefix": prefix,
            "force": force
        }
        return self._make_request("POST", "/index/rebuild", json=data)

    def update_index(self) -> Dict[str, Any]:
        """–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞"""
        return self._make_request("POST", "/index/update")

    def generate_completion(self, prompt: str, model_uri: Optional[str] = None,
                          max_tokens: int = 2000, temperature: float = 0.3) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Yandex GPT"""
        params = {
            "prompt": prompt,
            "max_tokens": max_tokens,
            "temperature": temperature
        }
        if model_uri:
            params["model_uri"] = model_uri

        return self._make_request("POST", "/completion/generate", params=params)


def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ API"""
    client = BartenderAPIClient()

    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ò–ò –ë–∞—Ä–º–µ–Ω–∞")
    print("=" * 50)

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞...")
        health = client.health_check()
        print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {health.get('status')}")
        print(f"   üìä –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ: {health.get('vectorstore', {}).get('documents', 0)}")

        # –°—Ç–∞—Ç—É—Å –∏–Ω–¥–µ–∫—Å–∞
        print("\n2. –°—Ç–∞—Ç—É—Å –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞...")
        index_status = client.get_index_status()
        print(f"   üìÅ –°—É—â–µ—Å—Ç–≤—É–µ—Ç: {index_status.get('exists')}")
        print(f"   üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {index_status.get('documents_count')}")

        # –¢–µ—Å—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        print("\n3. –¢–µ—Å—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏...")
        moderation = client.check_moderation("–†–µ—Ü–µ–ø—Ç –º–æ—Ö–∏—Ç–æ", is_input=True)
        print(f"   üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ: {moderation.get('is_safe')}")

        # –¢–µ—Å—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
        print("\n4. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞...")
        embedding = client.create_embedding("–∫–æ–∫—Ç–µ–π–ª—å –º–æ—Ö–∏—Ç–æ")
        print(f"   üî¢ –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {embedding.get('dimension')}")

        # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
        print("\n5. –¢–µ—Å—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
        search = client.semantic_search("—Ä–µ—Ü–µ–ø—Ç –º–æ—Ö–∏—Ç–æ", k=3)
        print(f"   üîç –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {search.get('total_found')}")

        # –¢–µ—Å—Ç –±–∞—Ä–º–µ–Ω—Å–∫–æ–≥–æ –ò–ò
        print("\n6. –¢–µ—Å—Ç –±–∞—Ä–º–µ–Ω—Å–∫–æ–≥–æ –ò–ò...")
        response = client.ask_bartender("–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –º–æ—Ö–∏—Ç–æ?", user_id="test_user")
        print(f"   ü§ñ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {len(response.get('answer', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {response.get('processing_time', 0):.2f}s")
        print(f"   üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {response.get('blocked', False)}")

        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

    return True


if __name__ == "__main__":
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API
    test_api_endpoints()
