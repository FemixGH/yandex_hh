#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
import logging
import asyncio
import aiohttp
import os
import re
from datetime import datetime

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ORCHESTRATOR_URL = os.getenv("ORCHESTRATOR_URL", "http://orchestrator:8000")

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def escape_markdown_v2(text: str) -> str:
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    return text

def format_bartender_response(text: str) -> str:
    if not text:
        return text or ""
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –±–æ—Ç–µ
    text = re.sub(r'^([–ê-–Ø–ÅA-Z][^:\n]*):?\s*$', r'*\1*', text, flags=re.MULTILINE)
    text = re.sub(r'^- (.+)$', r'‚Ä¢ _\1_', text, flags=re.MULTILINE)
    text = re.sub(r'^(\d+)\.\s*(.+)$', r'*\1\.* \2', text, flags=re.MULTILINE)
    
    drinks = ['–º–æ—Ö–∏—Ç–æ', '–º–∞—Ä—Ç–∏–Ω–∏', '–º–∞—Ä–≥–∞—Ä–∏—Ç–∞', '–ø–∏–Ω–∞ –∫–æ–ª–∞–¥–∞', '–∫–æ—Å–º–æ–ø–æ–ª–∏—Ç–µ–Ω', '–¥–∞–π–∫–∏—Ä–∏', '–∫–∞–π–ø–∏—Ä–∏–Ω—å—è', '–Ω–µ–≥—Ä–æ–Ω–∏', '–∞–ø–µ—Ä–æ–ª—å —Å–ø—Ä–∏—Ç—Ü', '–æ–ª–¥ —Ñ—ç—à–Ω']
    for drink in drinks:
        pattern = r'\b(' + re.escape(drink) + r')\b'
        text = re.sub(pattern, r'*\1*', text, flags=re.IGNORECASE)
        
    text = re.sub(r'\b(\d+\s*¬∞C|\d+\s*–≥—Ä–∞–¥—É—Å|\d+\s*–º–∏–Ω|\d+\s*—Å–µ–∫)\b', r'`\1`', text)
    text = re.sub(r'\b(\d+\s*–º–ª|\d+\s*–≥|\d+\s*—Å—Ç\.?\s*–ª\.?|\d+\s*—á\.?\s*–ª\.?)\b', r'`\1`', text)
    return text

async def call_orchestrator(user_id: int, text: str) -> dict:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(
                f"{ORCHESTRATOR_URL}/query",
                json={"user_id": user_id, "text": text, "k": 3},
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    logger.error(f"Orchestrator error: {response.status}")
                    return None
        except Exception as e:
            logger.error(f"Orchestrator call failed: {e}")
            return None

DISCLAIMER = """
‚ö†Ô∏è –í–ê–ñ–ù–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï ‚ö†Ô∏è

üö´ –ß—Ä–µ–∑–º–µ—Ä–Ω–æ–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è –≤—Ä–µ–¥–∏—Ç –≤–∞—à–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é
üö´ –ê–ª–∫–æ–≥–æ–ª—å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω –ª–∏—Ü–∞–º –¥–æ 18 –ª–µ—Ç
üö´ –ë–µ—Ä–µ–º–µ–Ω–Ω—ã–º –∏ –∫–æ—Ä–º—è—â–∏–º –∂–µ–Ω—â–∏–Ω–∞–º
üö´ –õ–∏—Ü–∞–º —Å –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º–∏, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω –∞–ª–∫–æ–≥–æ–ª—å

‚ö° –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö
‚ö° –ú—ã –Ω–µ –ø—Ä–∏–∑—ã–≤–∞–µ–º –∫ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –∞–ª–∫–æ–≥–æ–ª—è
‚ö° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –∞–ª–∫–æ–≥–æ–ª—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ

–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏, –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" üëá
"""

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        uid = update.effective_user.id
        user_states[uid] = {"disclaimer_shown": True, "accepted_disclaimer": False}
        keyboard = [["‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(f"üç∏ –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò –ë–∞—Ä–º–µ–Ω!\n\n{DISCLAIMER}", reply_markup=reply_markup)
        logger.info("User %s started bot", uid)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ start: %s", e)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        uid = update.effective_user.id
        text = (update.message.text or "").strip()
        
        if uid not in user_states:
            user_states[uid] = {"disclaimer_shown": False, "accepted_disclaimer": False}

        # Disclaimer flow
        if not user_states[uid].get("accepted_disclaimer", False):
            if text == "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
                user_states[uid]["accepted_disclaimer"] = True
                keyboard = [["ü•§ –ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ"], ["üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "üìñ –†–µ—Ü–µ–ø—Ç—ã"]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(
                    "üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–∞—Ä–º–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ.",
                    reply_markup=reply_markup
                )
                return
            elif text == "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è":
                await update.message.reply_text("üòî –ñ–∞–ª—å ‚Äî –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ /start")
                return
            else:
                keyboard = [["‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è"]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
                await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏—è.", reply_markup=reply_markup)
                return

        # –ú–∞–ø–ø–∏–Ω–≥ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã
        query_mapping = {
            "ü•§ –ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ": "–ü—Ä–µ–¥–ª–æ–∂–∏ –æ—Å–≤–µ–∂–∞—é—â–∏–π –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –∏–ª–∏ –º–æ–∫—Ç–µ–π–ª—å —Å —Ä–µ—Ü–µ–ø—Ç–æ–º",
            "üìñ –†–µ—Ü–µ–ø—Ç—ã": "–ü–æ–∫–∞–∂–∏ —Ä–µ—Ü–µ–ø—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –±–∞—Ä–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞ —Å –ø–æ—à–∞–≥–æ–≤—ã–º –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ–º",
            "üòä –í–µ—Å–µ–ª–æ–µ": "–ü—Ä–µ–¥–ª–æ–∂–∏ —è—Ä–∫–∏–π, –æ—Å–≤–µ–∂–∞—é—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞",
            "üòå –°–ø–æ–∫–æ–π–Ω–æ–µ": "–ü—Ä–µ–¥–ª–æ–∂–∏ –º—è–≥–∫–∏–π, —É—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è —Å–ø–æ–∫–æ–π–Ω–æ–≥–æ –≤–µ—á–µ—Ä–∞",
            "üî• –≠–Ω–µ—Ä–≥–∏—á–Ω–æ–µ": "–ü—Ä–µ–¥–ª–æ–∂–∏ –±–æ–¥—Ä—è—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è —ç–Ω–µ—Ä–≥–∏—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è",
            "üí≠ –†–æ–º–∞–Ω—Ç–∏—á–Ω–æ–µ": "–ü—Ä–µ–¥–ª–æ–∂–∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π, –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è",
            "üòé –£–≤–µ—Ä–µ–Ω–Ω–æ–µ": "–ü—Ä–µ–¥–ª–æ–∂–∏ —Å—Ç–∏–ª—å–Ω—ã–π, –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –±–∞—Ä–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è",
            "üåä –†–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ–µ": "–ü—Ä–µ–¥–ª–æ–∂–∏ –ª–µ–≥–∫–∏–π, –æ—Å–≤–µ–∂–∞—é—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è",
        }

        if text in query_mapping:
            query = query_mapping[text]
        elif text == "üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ":
            keyboard = [
                ["üòä –í–µ—Å–µ–ª–æ–µ", "üòå –°–ø–æ–∫–æ–π–Ω–æ–µ"],
                ["üî• –≠–Ω–µ—Ä–≥–∏—á–Ω–æ–µ", "üí≠ –†–æ–º–∞–Ω—Ç–∏—á–Ω–æ–µ"],
                ["üòé –£–≤–µ—Ä–µ–Ω–Ω–æ–µ", "üåä –†–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ–µ"],
                ["üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("üé≠ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:", reply_markup=reply_markup)
            return
        elif text == "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é":
            keyboard = [["ü•§ –ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ"], ["üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "üìñ –†–µ—Ü–µ–ø—Ç—ã"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("üç∏ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–∞—Ä–º–µ–Ω–∞:", reply_markup=reply_markup)
            return
        else:
            query = text

        # –í—ã–∑–æ–≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        logger.info(f"User {uid} query: {query}")
        response = await call_orchestrator(uid, query)

        if not response:
            await update.message.reply_text("üòÖ –ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        if response.get("blocked"):
            reason = response.get("reason", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞")
            await update.message.reply_text(escape_markdown_v2(f"üö´ –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {reason}"))
            return

        answer = response.get("answer", "")
        if not answer:
            answer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç."

        formatted_answer = format_bartender_response(answer)
        await update.message.reply_text(formatted_answer)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ handle_message: %s", e)
        await update.message.reply_text("üòÖ –ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

def main():
    if not TELEGRAM_TOKEN:
        logger.error("TELEGRAM_TOKEN not set!")
        return

    logger.info("üöÄ Starting Telegram bot...")
    
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()

if __name__ == "__main__":
    main()