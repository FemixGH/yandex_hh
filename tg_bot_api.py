#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –ò–ò –ë–∞—Ä–º–µ–Ω–∞, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —á–µ—Ä–µ–∑ FastAPI API
"""

import asyncio
import aiohttp
import logging
from typing import Dict, Any, Optional
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from settings import TELEGRAM_TOKEN
from logging_conf import setup_logging

setup_logging()
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
API_BASE_URL = "http://localhost:8000"  # URL –≤–∞—à–µ–≥–æ FastAPI —Å–µ—Ä–≤–µ—Ä–∞
API_TIMEOUT = 30

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

class BartenderAPIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FastAPI –±—ç–∫–µ–Ω–¥–æ–º"""

    def __init__(self, base_url: str = API_BASE_URL):
        self.base_url = base_url.rstrip('/')

    async def ask_bartender(self, query: str, user_id: str) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞—Ä–º–µ–Ω—Å–∫–æ–º—É –ò–ò —á–µ—Ä–µ–∑ API"""
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=API_TIMEOUT)) as session:
            try:
                async with session.post(
                    f"{self.base_url}/bartender/ask",
                    json={
                        "query": query,
                        "user_id": user_id,
                        "k": 3,
                        "with_moderation": True
                    }
                ) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        error_text = await response.text()
                        logger.error(f"API error {response.status}: {error_text}")
                        return {
                            "answer": "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —É –º–µ–Ω—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                            "blocked": False,
                            "error": True
                        }
            except asyncio.TimeoutError:
                logger.error("API timeout for user %s", user_id)
                return {
                    "answer": "‚è∞ –ó–∞–ø—Ä–æ—Å –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å.",
                    "blocked": False,
                    "error": True
                }
            except Exception as e:
                logger.error(f"API client error: {e}")
                return {
                    "answer": "üòÖ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                    "blocked": False,
                    "error": True
                }

    async def health_check(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=5)) as session:
                async with session.get(f"{self.base_url}/health") as response:
                    return response.status == 200
        except Exception:
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç API
api_client = BartenderAPIClient()

def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2"""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    return text

def format_bartender_response(text: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –±–∞—Ä–º–µ–Ω–∞ –¥–ª—è Telegram"""
    import re

    # –°–Ω–∞—á–∞–ª–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2
    text = escape_markdown_v2(text)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    # –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (–∏—â–µ–º —É–∂–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ—Ñ–∏—Å—ã)
    text = re.sub(r'^\\- (.+)$', r'‚Ä¢ _\1_', text, flags=re.MULTILINE)

    # –®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è (–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏)
    text = re.sub(r'^(\d+)\\\.\s*(.+)$', r'\1\\. \2', text, flags=re.MULTILINE)

    # –í—ã–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤
    drinks = ['–º–æ—Ö–∏—Ç–æ', '–º–∞—Ä—Ç–∏–Ω–∏', '–º–∞—Ä–≥–∞—Ä–∏—Ç–∞', '–ø–∏–Ω–∞ –∫–æ–ª–∞–¥–∞', '–∫–æ—Å–º–æ–ø–æ–ª–∏—Ç–µ–Ω',
              '–¥–∞–π–∫–∏—Ä–∏', '–∫–∞–π–ø–∏—Ä–∏–Ω—å—è', '–Ω–µ–≥—Ä–æ–Ω–∏', '–∞–ø–µ—Ä–æ–ª—å —Å–ø—Ä–∏—Ç—Ü', '–æ–ª–¥ —Ñ—ç—à–Ω']
    for drink in drinks:
        escaped_drink = escape_markdown_v2(drink)
        pattern = r'\b(' + re.escape(escaped_drink) + r')\b'
        text = re.sub(pattern, r'*\1*', text, flags=re.IGNORECASE)

    # –í—ã–¥–µ–ª—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ –≤—Ä–µ–º—è
    text = re.sub(r'\b(\d+\s*¬∞C|\d+\s*–≥—Ä–∞–¥—É—Å|\d+\s*–º–∏–Ω|\d+\s*—Å–µ–∫)\b', r'`\1`', text)

    # –í—ã–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    text = re.sub(r'\b(\d+\s*–º–ª|\d+\s*–≥|\d+\s*—Å—Ç\\\.?\s*–ª\\\.?|\d+\s*—á\\\.?\s*–ª\\\.?)\b', r'`\1`', text)

    return text

def get_user_info(update: Update) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user = update.effective_user
    if not user:
        return "Unknown"

    info_parts = []
    if user.username:
        info_parts.append(f"@{user.username}")
    if user.first_name:
        info_parts.append(user.first_name)
    if user.last_name:
        info_parts.append(user.last_name)

    if info_parts:
        return f"{user.id} ({' '.join(info_parts)})"
    else:
        return str(user.id)

# –î–∏—Å–∫–ª–µ–π–º–µ—Ä
DISCLAIMER = """
‚ö†Ô∏è –í–ê–ñ–ù–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï ‚ö†Ô∏è

üö´ –ß—Ä–µ–∑–º–µ—Ä–Ω–æ–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è –≤—Ä–µ–¥–∏—Ç –≤–∞—à–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é
üö´ –ê–ª–∫–æ–≥–æ–ª—å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω –ª–∏—Ü–∞–º –¥–æ 18 –ª–µ—Ç
üö´ –ë–µ—Ä–µ–º–µ–Ω–Ω—ã–º –∏ –∫–æ—Ä–º—è—â–∏–º –∂–µ–Ω—â–∏–Ω–∞–º
üö´ –õ–∏—Ü–∞–º —Å –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º–∏, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω –∞–ª–∫–æ–≥–æ–ª—å

‚ö° –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö
‚ö° –ú—ã –Ω–µ –ø—Ä–∏–∑—ã–≤–∞–µ–º –∫ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –∞–ª–∫–æ–≥–æ–ª—è
‚ö° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –∞–ª–∫–æ–≥–æ–ª—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ

–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏, –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" üëá
"""

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    try:
        uid = update.effective_user.id
        user_states[uid] = {"disclaimer_shown": True, "accepted_disclaimer": False}

        keyboard = [["‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

        formatted_disclaimer = escape_markdown_v2(DISCLAIMER)
        await update.message.reply_text(
            f"üç∏ –ü—Ä–∏–≤–µ—Ç\\! –Ø –ò–ò –ë–∞—Ä–º–µ–Ω\\!\n\n{formatted_disclaimer}",
            reply_markup=reply_markup,
            parse_mode='MarkdownV2'
        )
        logger.info("User %s started bot", uid)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ start: %s", e)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        uid = update.effective_user.id
        text = (update.message.text or "").strip()
        user_info = get_user_info(update)
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–∞–ø–∏—Å–∞–ª: %s", user_info, text)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if uid not in user_states:
            user_states[uid] = {"disclaimer_shown": False, "accepted_disclaimer": False}

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Å–∫–ª–µ–π–º–µ—Ä–∞
        if not user_states[uid].get("accepted_disclaimer", False):
            if text == "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
                user_states[uid]["accepted_disclaimer"] = True
                keyboard = [["ü•§ –ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ"], ["üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "üìñ –†–µ—Ü–µ–ø—Ç—ã"]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(
                    "üéâ –û—Ç–ª–∏—á–Ω–æ\\! –¢–µ–ø–µ—Ä—å —è –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–∞—Ä–º–µ–Ω\\!\n\n"
                    "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ\\.\n"
                    "üç∏ –ù–∞–ø—Ä–∏–º–µ—Ä: '–†–µ—Ü–µ–ø—Ç –º–æ—Ö–∏—Ç–æ', '–ö–æ–∫—Ç–µ–π–ª—å —Å –¥–∂–∏–Ω–æ–º', '–ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è –≤–µ—á–µ—Ä–∏–Ω–∫–∏'\n"
                    "üîç –Ø –∑–Ω–∞—é –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∫–æ–∫—Ç–µ–π–ª–µ–π –∏ –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤\\!",
                    reply_markup=reply_markup,
                    parse_mode='MarkdownV2'
                )
                return
            elif text == "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è":
                await update.message.reply_text(
                    "üòî –ñ–∞–ª—å ‚Äî –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ /start",
                    parse_mode='MarkdownV2'
                )
                return
            else:
                keyboard = [["‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è"]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
                await update.message.reply_text(
                    "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏—è\\.",
                    reply_markup=reply_markup,
                    parse_mode='MarkdownV2'
                )
                return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        query = await process_button_or_text(text, update)
        if query is None:  # –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ process_button_or_text
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        response = await api_client.ask_bartender(query, str(uid))

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        answer = response.get("answer", "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.")
        blocked = response.get("blocked", False)
        error = response.get("error", False)

        if blocked:
            logger.info("–ó–∞–ø—Ä–æ—Å –æ—Ç %s –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π: %s", user_info, response.get("reason"))
            await update.message.reply_text(
                escape_markdown_v2(answer),
                parse_mode='MarkdownV2'
            )
            return

        if error:
            logger.warning("–û—à–∏–±–∫–∞ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", user_info)
            await update.message.reply_text(
                escape_markdown_v2(answer),
                parse_mode='MarkdownV2'
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        formatted_answer = format_bartender_response(answer)
        await update.message.reply_text(
            formatted_answer,
            parse_mode='MarkdownV2'
        )

        # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        if text.startswith(("üòä", "üòå", "üî•", "üí≠", "üòé", "üåä")):
            keyboard = [["ü•§ –ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ"], ["üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "üìñ –†–µ—Ü–µ–ø—Ç—ã"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                "üç∏ –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —á—Ç–æ\\-—Ç–æ –µ—â–µ\\?",
                reply_markup=reply_markup,
                parse_mode='MarkdownV2'
            )

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        processing_time = response.get("processing_time", 0)
        retrieved_count = response.get("retrieved_count", 0)
        logger.info("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s (–≤—Ä–µ–º—è: %.2fs, –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: %d)",
                   user_info, processing_time, retrieved_count)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ handle_message: %s", e)
        try:
            await update.message.reply_text(
                "üòÖ –ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ\\-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑\\.",
                parse_mode='MarkdownV2'
            )
        except Exception:
            pass

async def process_button_or_text(text: str, update: Update) -> Optional[str]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –∑–∞–ø—Ä–æ—Å—ã"""
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    if text == "ü•§ –ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ":
        return "–ü—Ä–µ–¥–ª–æ–∂–∏ –æ—Å–≤–µ–∂–∞—é—â–∏–π –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –∏–ª–∏ –º–æ–∫–∫—Ç–µ–π–ª—å —Å —Ä–µ—Ü–µ–ø—Ç–æ–º"
    elif text == "üìñ –†–µ—Ü–µ–ø—Ç—ã":
        return "–ü–æ–∫–∞–∂–∏ —Ä–µ—Ü–µ–ø—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –±–∞—Ä–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞ —Å –ø–æ—à–∞–≥–æ–≤—ã–º –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ–º"
    elif text == "üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        keyboard = [
            ["üòä –í–µ—Å–µ–ª–æ–µ", "üòå –°–ø–æ–∫–æ–π–Ω–æ–µ"],
            ["üî• –≠–Ω–µ—Ä–≥–∏—á–Ω–æ–µ", "üí≠ –†–æ–º–∞–Ω—Ç–∏—á–Ω–æ–µ"],
            ["üòé –£–≤–µ—Ä–µ–Ω–Ω–æ–µ", "üåä –†–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ–µ"],
            ["üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "üé≠ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –∏ —è –ø–æ–¥–±–µ—Ä—É –∏–¥–µ–∞–ª—å–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å:",
            reply_markup=reply_markup,
            parse_mode='MarkdownV2'
        )
        return None
    elif text == "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
        keyboard = [["ü•§ –ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ"], ["üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "üìñ –†–µ—Ü–µ–ø—Ç—ã"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "üç∏ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–∞—Ä–º–µ–Ω–∞:",
            reply_markup=reply_markup,
            parse_mode='MarkdownV2'
        )
        return None

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
    mood_queries = {
        "üòä –í–µ—Å–µ–ª–æ–µ": "–ü—Ä–µ–¥–ª–æ–∂–∏ —è—Ä–∫–∏–π, –æ—Å–≤–µ–∂–∞—é—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞",
        "üòå –°–ø–æ–∫–æ–π–Ω–æ–µ": "–ü—Ä–µ–¥–ª–æ–∂–∏ –º—è–≥–∫–∏–π, —É—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è —Å–ø–æ–∫–æ–π–Ω–æ–≥–æ –≤–µ—á–µ—Ä–∞",
        "üî• –≠–Ω–µ—Ä–≥–∏—á–Ω–æ–µ": "–ü—Ä–µ–¥–ª–æ–∂–∏ –±–æ–¥—Ä—è—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è —ç–Ω–µ—Ä–≥–∏—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è",
        "üí≠ –†–æ–º–∞–Ω—Ç–∏—á–Ω–æ–µ": "–ü—Ä–µ–¥–ª–æ–∂–∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π, –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è",
        "üòé –£–≤–µ—Ä–µ–Ω–Ω–æ–µ": "–ü—Ä–µ–¥–ª–æ–∂–∏ —Å—Ç–∏–ª—å–Ω—ã–π, –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –±–∞—Ä–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è",
        "üåä –†–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ–µ": "–ü—Ä–µ–¥–ª–æ–∂–∏ –ª–µ–≥–∫–∏–π, –æ—Å–≤–µ–∂–∞—é—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"
    }

    if text in mood_queries:
        return mood_queries[text]

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
    text_lower = text.lower()
    if any(word in text_lower for word in ["—Ä–∞—Å—Å–ª–∞–±", "–æ—Ç–¥–æ—Ö–Ω", "—Ä–µ–ª–∞–∫—Å", "—É—Å—Ç–∞–ª", "—Å—Ç—Ä–µ—Å—Å"]):
        return "–ü—Ä–µ–¥–ª–æ–∂–∏ —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è —Å–Ω—è—Ç–∏—è —Å—Ç—Ä–µ—Å—Å–∞ –∏ –æ—Ç–¥—ã—Ö–∞"
    elif any(word in text_lower for word in ["–¥–µ—à–µ–≤", "–±—é–¥–∂–µ—Ç", "–Ω–µ–¥–æ—Ä–æ–≥", "–ø—Ä–æ—Å—Ç–æ–π", "—ç–∫–æ–Ω–æ–º–Ω"]):
        return f"–ü—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–æ—Å—Ç–æ–π –∏ –±—é–¥–∂–µ—Ç–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å: {text}"
    elif any(word in text_lower for word in ["—Ä–µ–¥–±—É–ª", "red bull", "—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫", "—ç–Ω–µ—Ä–≥–∏—è", "–±–æ–¥—Ä—è—â"]):
        return f"–ü—Ä–µ–¥–ª–æ–∂–∏ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å –∏–ª–∏ –Ω–∞–ø–∏—Ç–æ–∫: {text}"

    # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    return text

async def check_api_health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å FastAPI —Å–µ—Ä–≤–µ—Ä–∞...")

    for attempt in range(5):
        if await api_client.health_check():
            logger.info("‚úÖ FastAPI —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            logger.warning(f"‚ö†Ô∏è FastAPI —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/5)")
            if attempt < 4:
                await asyncio.sleep(2)

    logger.error("‚ùå FastAPI —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ %s", API_BASE_URL)
    return False

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –ò–ò –ë–∞—Ä–º–µ–Ω–∞...")

    if not TELEGRAM_TOKEN:
        logger.error("‚ùå TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("ü§ñ –ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∑–∞–ø—É—Å–∫–∞—é...")
    logger.info(f"üåê API —Å–µ—Ä–≤–µ—Ä: {API_BASE_URL}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        application.run_polling(drop_pending_updates=True)
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()
