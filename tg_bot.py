import os
import requests
import threading
import logging
import asyncio
import json
from datetime import datetime
from dotenv import load_dotenv
from fastapi import FastAPI
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—é–º–µ
import resume_handler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(
            f"bot_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log",
            encoding='utf-8'
        ),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CLIENT_ID = os.getenv("CLIENT_ID")
CLIENT_SECRET = os.getenv("CLIENT_SECRET")
REDIRECT_URI = os.getenv("REDIRECT_URI", "http://localhost:8000/callback")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# FastAPI —Å–µ—Ä–≤–µ—Ä
api = FastAPI()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É –ø–æ—Ç–æ–∫–∞–º–∏
application = None
bot_loop = None


def send_message_sync(chat_id: int, text: str, reply_markup=None):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π event loop"""
    if bot_loop and application:
        asyncio.run_coroutine_threadsafe(
            _send_message_async(chat_id, text, reply_markup),
            bot_loop
        )


async def _send_message_async(chat_id: int, text: str, reply_markup=None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await application.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")


async def send_message(bot, chat_id: int, text: str, reply_markup=None, parse_mode='HTML'):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞"""
    try:
        await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")


def get_my_vacancies(access_token: str, employer_id: int, page: int = 0, per_page: int = 20):
    try:
        url = f"https://api.hh.ru/employers/{employer_id}/vacancies"
        params = {"page": page, "per_page": per_page}
        headers = {"Authorization": f"Bearer {access_token}"}
        resp = requests.get(url, headers=headers, params=params)
        if resp.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π: {resp.status_code}")
            return None
        return resp.json()
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
        return None


def show_current_item_sync(user_id: int):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ FastAPI"""
    if bot_loop:
        asyncio.run_coroutine_threadsafe(
            show_current_item(user_id),
            bot_loop
        )


async def show_current_item(user_id: int):
    try:
        st = user_states.get(user_id)
        if not st:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return

        items = st.get("items", [])
        page = st.get("page", 0)
        if not items:
            await send_message(application.bot, user_id, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
            return

        role = st.get("role")
        item = items[page]

        if role == "seeker":
            # –î–ª—è —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—é–º–µ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
            await resume_handler.show_resume_management(user_states, application, send_message, user_id, item)
        else:
            # –î–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é
            text = (
                f"üè¢ –í–∞–∫–∞–Ω—Å–∏—è {page + 1}/{len(items)}:\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {item.get('name', '')}\n"
                f"–ö–æ–º–ø–∞–Ω–∏—è: {item.get('employer', {}).get('name', '')}\n"
                f"–ì–æ—Ä–æ–¥: {item.get('area', {}).get('name', '')}\n"
                f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {resume_handler.format_salary(item.get('salary'))}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {item.get('snippet', {}).get('requirement', '')}"
            )

            keyboard = [["‚èÆ –ù–∞–∑–∞–¥", "‚è≠ –í–ø–µ—Ä—ë–¥"], ["üîç –ü–æ–∏—Å–∫"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await send_message(application.bot, user_id, text, reply_markup=reply_markup)

        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω —ç–ª–µ–º–µ–Ω—Ç {page} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


async def handle_text_input(user_id: int, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ - –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ resume_handler"""
    return await resume_handler.handle_text_input(user_states, application, send_message, user_id, text)



# --- CALLBACK HH ---
@api.get("/callback")
async def hh_callback(code: str, state: str):
    user_id = int(state)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
    token_url = "https://hh.ru/oauth/token"
    data = {
        "grant_type": "authorization_code",
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET,
        "code": code,
        "redirect_uri": REDIRECT_URI,
    }

    try:
        resp = requests.post(token_url, data=data)
        if resp.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: {resp.text}")
            return {"error": resp.text}

        tokens = resp.json()
        access_token = tokens.get("access_token")
        if not access_token:
            logger.error("–í –æ—Ç–≤–µ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç access_token")
            return {"error": "No access_token in response"}

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ
        me_resp = requests.get(
            "https://api.hh.ru/me",
            headers={"Authorization": f"Bearer {access_token}"}
        )
        if me_resp.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {me_resp.text}")
            return {"error": me_resp.text}

        me_data = me_resp.json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å
        role = None
        if me_data.get("is_applicant", False):
            role = "seeker"
        elif me_data.get("employer", None) is not None:
            role = "employer"
        else:
            role = "seeker"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        user_states[user_id] = {
            "authorized": True,
            "tokens": tokens,
            "role": role,
            "me": me_data,
            "items": [],
            "page": 0,
            "current_mode": "browse",
            "edit_data": {},
            "waiting_for_input": None
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π event loop
        role_text = "üë®‚Äçüíª –°–æ–∏—Å–∫–∞—Ç–µ–ª—å" if role == "seeker" else "üè¢ –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å"
        send_message_sync(
            user_id,
            f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ {role_text}"
        )

        if role == "seeker":
            resumes = resume_handler.get_my_resumes(access_token)
            if resumes and resumes.get("items"):
                user_states[user_id]["items"] = resumes["items"]
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(resumes['items'])} —Ä–µ–∑—é–º–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                show_current_item_sync(user_id)
            else:
                logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç —Ä–µ–∑—é–º–µ")
                send_message_sync(user_id,
                                  "‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—é–º–µ.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ûï –ù–æ–≤–æ–µ —Ä–µ–∑—é–º–µ' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
        else:
            employer = me_data.get("employer")
            if employer and employer.get("id"):
                vacancies = get_my_vacancies(access_token, employer["id"])
                if vacancies and vacancies.get("items"):
                    user_states[user_id]["items"] = vacancies["items"]
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(vacancies['items'])} –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    show_current_item_sync(user_id)
                else:
                    logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π")
                    send_message_sync(user_id, "‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π.")

        return {"status": "ok", "role": role}

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        return {"error": str(e)}


async def start_search_for_user(user_id: int):
    try:
        keyboard = [["üëç –õ–∞–π–∫", "üëé –î–∏–∑–ª–∞–π–∫", "‚è∏ –ü–∞—É–∑–∞"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await send_message(application.bot, user_id, "üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫‚Ä¶", reply_markup=reply_markup)
        logger.info(f"–ù–∞—á–∞—Ç –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


# --- TELEGRAM BOT HANDLERS ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        uid = update.effective_user.id
        user_states[uid] = {
            "authorized": False,
            "role": None,
            "tokens": None,
            "me": None,
            "items": [],
            "page": 0,
            "current_mode": "browse",
            "edit_data": {},
            "waiting_for_input": None
        }
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∑—é–º–µ –Ω–∞ HH.ru\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:\n"
            "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö —Ä–µ–∑—é–º–µ\n"
            "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ\n"
            "‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ä–µ–∑—é–º–µ\n"
            "üóë –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ\n"
            "üîç –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ HH.ru"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")


async def auth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        uid = update.effective_user.id
        auth_url = (
            f"https://hh.ru/oauth/authorize"
            f"?response_type=code"
            f"&client_id={CLIENT_ID}"
            f"&redirect_uri={REDIRECT_URI}"
            f"&state={uid}"
        )
        await update.message.reply_text(
            f"üîë –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n{auth_url}"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ auth: {e}")


async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
    try:
        query = update.callback_query
        await query.answer()

        uid = query.from_user.id
        data = query.data

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –Ω–∞–∂–∞–ª inline –∫–Ω–æ–ø–∫—É: {data}")

        if data.startswith("resume_details:"):
            resume_id = data.split(":", 1)[1]
            await resume_handler.show_resume_details(user_states, application, send_message, uid, resume_id)

        elif data.startswith("resume_edit:"):
            resume_id = data.split(":", 1)[1]
            await resume_handler.start_resume_editing(user_states, application, send_message, uid, resume_id)

        elif data.startswith("resume_delete:"):
            resume_id = data.split(":", 1)[1]
            await resume_handler.delete_resume_confirm(user_states, application, send_message, uid, resume_id)

        elif data.startswith("resume_copy:"):
            resume_id = data.split(":", 1)[1]
            await resume_handler.copy_resume(user_states, application, send_message, uid, resume_id)

        elif data.startswith("confirm_delete:"):
            resume_id = data.split(":", 1)[1]
            await resume_handler.confirm_resume_deletion(user_states, application, send_message, uid, resume_id)

        elif data == "back_to_list":
            st = user_states.get(uid, {})
            st["current_mode"] = "browse"
            st["waiting_for_input"] = None
            st["edit_data"] = {}
            await show_current_item(uid)

        elif data == "edit_title":
            st = user_states.get(uid, {})
            st["waiting_for_input"] = "title"
            await send_message(application.bot, uid, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:")

        elif data == "edit_salary":
            st = user_states.get(uid, {})
            st["waiting_for_input"] = "salary"
            await send_message(application.bot, uid, "üí∞ –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∑–∞—Ä–ø–ª–∞—Ç—É (–∏–ª–∏ 0 –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):")

        elif data == "edit_experience":
            await resume_handler.show_experience_options(user_states, application, send_message, uid)

        elif data == "edit_skills":
            st = user_states.get(uid, {})
            st["waiting_for_input"] = "skills"
            current_skills = ", ".join(st.get("edit_data", {}).get("skills", []))
            await send_message(
                application.bot,
                uid,
                f"üîß –¢–µ–∫—É—â–∏–µ –Ω–∞–≤—ã–∫–∏: {current_skills or '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:"
            )

        elif data == "save_resume":
            await resume_handler.save_resume_changes(user_states, application, send_message, uid)

        elif data.startswith("exp_"):
            exp_id = data.replace("exp_", "")
            st = user_states.get(uid, {})
            st["edit_data"]["experience"] = {"id": exp_id}
            await send_message(application.bot, uid, f"‚úÖ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –∏–∑–º–µ–Ω–µ–Ω")
            await resume_handler.start_resume_editing(user_states, application, send_message, uid, st.get("edit_resume_id"))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback query: {e}")



async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        uid = update.effective_user.id
        st = user_states.get(uid, {})
        text = update.message.text

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {repr(text)}")

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ–º –ª–∏ –º—ã —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
        if await handle_text_input(uid, text):
            return  # –û–±—Ä–∞–±–æ—Ç–∞–ª–∏ –∫–∞–∫ –≤–≤–æ–¥, –≤—ã—Ö–æ–¥–∏–º

        # –û–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if text == "‚èÆ –ù–∞–∑–∞–¥":
            if st.get("page", 0) > 0:
                st["page"] -= 1
                await show_current_item(uid)
            else:
                await update.message.reply_text("–í—ã –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")

        elif text == "‚è≠ –í–ø–µ—Ä—ë–¥":
            if st.get("page", 0) < len(st.get("items", [])) - 1:
                st["page"] += 1
                await show_current_item(uid)
            else:
                await update.message.reply_text("–í—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")

        elif text == "‚ûï –ù–æ–≤–æ–µ —Ä–µ–∑—é–º–µ":
            if not st.get("authorized"):
                await update.message.reply_text("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (/auth)")
                return
            await resume_handler.start_resume_creation(user_states, application, send_message, uid)

        elif text == "üîç –ü–æ–∏—Å–∫":
            await start_search_for_user(uid)

        elif text == "üëç –õ–∞–π–∫":
            await update.message.reply_text("‚ù§Ô∏è –õ–∞–π–∫")

        elif text == "üëé –î–∏–∑–ª–∞–π–∫":
            await update.message.reply_text("‚ùå –î–∏–∑–ª–∞–π–∫")

        elif text == "‚è∏ –ü–∞—É–∑–∞":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ä–µ–∑—é–º–µ/–≤–∞–∫–∞–Ω—Å–∏–π
            if st.get("authorized") and st.get("items"):
                await show_current_item(uid)
            else:
                keyboard = [["üîç –ü–æ–∏—Å–∫"]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text("‚è∏ –ü–æ–∏—Å–∫ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=reply_markup)

        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")


def run_bot():
    global application, bot_loop
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –±–æ—Ç–∞
        bot_loop = asyncio.new_event_loop()
        asyncio.set_event_loop(bot_loop)

        application = Application.builder().token(TELEGRAM_TOKEN).build()

        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("auth", auth))
        application.add_handler(CallbackQueryHandler(handle_callback_query))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        application.run_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()

    # –î–∞–µ–º –≤—Ä–µ–º—è –±–æ—Ç—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
    import time

    time.sleep(2)

    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI
    import uvicorn

    uvicorn.run(api, host="0.0.0.0", port=8000)