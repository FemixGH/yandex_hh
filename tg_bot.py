#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from settings import TELEGRAM_TOKEN
from rag_yandex_nofaiss import async_answer_user_query
from bartender_file_handler import build_bartender_index_from_bucket
from logging_conf import setup_logging
setup_logging()

import logging
import os
import re
logger = logging.getLogger(__name__)


# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ)
user_states = {}

def escape_markdown_v2(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
    """
    # –°–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤ MarkdownV2
    escape_chars = r'_*[]()~`>#+-=|{}.!'

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')

    return text

def format_markdown_message(text: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown, —Å–æ—Ö—Ä–∞–Ω—è—è —ç–º–æ–¥–∑–∏ –∏ –æ—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    """
    # –ù–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —ç–º–æ–¥–∑–∏ –∏ –±–∞–∑–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
    return text

def format_bartender_response(text: str) -> str:
    """
    –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –±–∞—Ä–º–µ–Ω–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown
    """
    # –ó–∞–º–µ–Ω—è–µ–º –æ–±—ã—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ (–¥–µ–ª–∞–µ–º –∂–∏—Ä–Ω—ã–º–∏)
    text = re.sub(r'^([–ê-–Ø–ÅA-Z][^:\n]*):?\s*$', r'*\1*', text, flags=re.MULTILINE)

    # –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã (–¥–µ–ª–∞–µ–º –∫—É—Ä—Å–∏–≤–æ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–µ—Ñ–∏—Å–∞–º–∏)
    text = re.sub(r'^- (.+)$', r'‚Ä¢ _\1_', text, flags=re.MULTILINE)

    # –®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è (–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏)
    text = re.sub(r'^(\d+)\.\s*(.+)$', r'*\1\.* \2', text, flags=re.MULTILINE)

    # –í—ã–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–ø–∏—Ç–∫–æ–≤ –∂–∏—Ä–Ω—ã–º
    drinks = ['–º–æ—Ö–∏—Ç–æ', '–º–∞—Ä—Ç–∏–Ω–∏', '–º–∞—Ä–≥–∞—Ä–∏—Ç–∞', '–ø–∏–Ω–∞ –∫–æ–ª–∞–¥–∞', '–∫–æ—Å–º–æ–ø–æ–ª–∏—Ç–µ–Ω', '–¥–∞–π–∫–∏—Ä–∏', '–∫–∞–π–ø–∏—Ä–∏–Ω—å—è', '–Ω–µ–≥—Ä–æ–Ω–∏', '–∞–ø–µ—Ä–æ–ª—å —Å–ø—Ä–∏—Ç—Ü', '–æ–ª–¥ —Ñ—ç—à–Ω']
    for drink in drinks:
        pattern = r'\b(' + re.escape(drink) + r')\b'
        text = re.sub(pattern, r'*\1*', text, flags=re.IGNORECASE)

    # –í—ã–¥–µ–ª—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ –≤—Ä–µ–º—è
    text = re.sub(r'\b(\d+\s*¬∞C|\d+\s*–≥—Ä–∞–¥—É—Å|\d+\s*–º–∏–Ω|\d+\s*—Å–µ–∫)\b', r'`\1`', text)

    # –í—ã–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    text = re.sub(r'\b(\d+\s*–º–ª|\d+\s*–≥|\d+\s*—Å—Ç\.?\s*–ª\.?|\d+\s*—á\.?\s*–ª\.?)\b', r'`\1`', text)

    return text

def get_user_info(update: Update) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user = update.effective_user
    if not user:
        return "Unknown"

    info_parts = []
    if user.username:
        info_parts.append(f"@{user.username}")
    if user.first_name:
        info_parts.append(user.first_name)
    if user.last_name:
        info_parts.append(user.last_name)

    if info_parts:
        return f"{user.id} ({' '.join(info_parts)})"
    else:
        return str(user.id)

DISCLAIMER = """
‚ö†Ô∏è –í–ê–ñ–ù–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï ‚ö†Ô∏è

üö´ –ß—Ä–µ–∑–º–µ—Ä–Ω–æ–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è –≤—Ä–µ–¥–∏—Ç –≤–∞—à–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é
üö´ –ê–ª–∫–æ–≥–æ–ª—å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω –ª–∏—Ü–∞–º –¥–æ 18 –ª–µ—Ç
üö´ –ë–µ—Ä–µ–º–µ–Ω–Ω—ã–º –∏ –∫–æ—Ä–º—è—â–∏–º –∂–µ–Ω—â–∏–Ω–∞–º
üö´ –õ–∏—Ü–∞–º —Å –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º–∏, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω –∞–ª–∫–æ–≥–æ–ª—å

‚ö° –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö
‚ö° –ú—ã –Ω–µ –ø—Ä–∏–∑—ã–≤–∞–µ–º –∫ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –∞–ª–∫–æ–≥–æ–ª—è
‚ö° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –∞–ª–∫–æ–≥–æ–ª—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ

–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏, –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" üëá
"""

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        uid = update.effective_user.id
        user_states[uid] = {"disclaimer_shown": True, "accepted_disclaimer": False}

        keyboard = [["‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

        formatted_disclaimer = escape_markdown_v2(DISCLAIMER)
        await update.message.reply_text(
            f"üç∏ –ü—Ä–∏–≤–µ—Ç\\! –Ø –ò–ò –ë–∞—Ä–º–µ–Ω\\!\n\n{formatted_disclaimer}",
            reply_markup=reply_markup,
            parse_mode='MarkdownV2'
        )
        logger.info("User %s started bot", uid)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ start: %s", e)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        uid = update.effective_user.id
        text = (update.message.text or "").strip()
        user_info = get_user_info(update)
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–∞–ø–∏—Å–∞–ª: %s", uid, text)
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–∞–ø–∏—Å–∞–ª: %s", user_info, text)
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ—Ç
        if uid not in user_states:
            user_states[uid] = {"disclaimer_shown": False, "accepted_disclaimer": False}

        # –ï—Å–ª–∏ –¥–∏—Å–∫–ª–µ–π–º–µ—Ä –Ω–µ –ø—Ä–∏–Ω—è—Ç ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
        if not user_states[uid].get("accepted_disclaimer", False):
            if text == "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
                user_states[uid]["accepted_disclaimer"] = True
                keyboard = [["ü•§ –ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ"], ["üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "üìñ –†–µ—Ü–µ–ø—Ç—ã"]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(
                    "üéâ –û—Ç–ª–∏—á–Ω–æ\\! –¢–µ–ø–µ—Ä—å —è –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–∞—Ä–º–µ–Ω\\!\n\n"
                    "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ\\.\n"
                    "üç∏ –ù–∞–ø—Ä–∏–º–µ—Ä: '–†–µ—Ü–µ–ø—Ç –º–æ—Ö–∏—Ç–æ', '–ö–æ–∫—Ç–µ–π–ª—å —Å –¥–∂–∏–Ω–æ–º', '–ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è –≤–µ—á–µ—Ä–∏–Ω–∫–∏'\n"
                    "üîç –Ø –∑–Ω–∞—é –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∫–æ–∫—Ç–µ–π–ª–µ–π –∏ –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤\\!",
                    reply_markup=reply_markup,
                    parse_mode='MarkdownV2'
                )
                return
            elif text == "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è":
                await update.message.reply_text(
                    "üòî –ñ–∞–ª—å ‚Äî –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ /start",
                    parse_mode='MarkdownV2'
                )
                return
            else:
                keyboard = [["‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è"]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
                await update.message.reply_text(
                    "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏—è\\.",
                    reply_markup=reply_markup,
                    parse_mode='MarkdownV2'
                )
                return

        # –ï—Å–ª–∏ –¥–∏—Å–∫–ª–µ–π–º–µ—Ä –ø—Ä–∏–Ω—è—Ç ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ RAG pipeline
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ ‚Äî –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø–æ–Ω—è—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        if text == "ü•§ –ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ":
            query = "–ü—Ä–µ–¥–ª–æ–∂–∏ –æ—Å–≤–µ–∂–∞—é—â–∏–π –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –∏–ª–∏ –º–æ–∫–∫—Ç–µ–π–ª—å —Å —Ä–µ—Ü–µ–ø—Ç–æ–º"
        elif text == "üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
            keyboard = [
                ["üòä –í–µ—Å–µ–ª–æ–µ", "üòå –°–ø–æ–∫–æ–π–Ω–æ–µ"],
                ["üî• –≠–Ω–µ—Ä–≥–∏—á–Ω–æ–µ", "üí≠ –†–æ–º–∞–Ω—Ç–∏—á–Ω–æ–µ"],
                ["üòé –£–≤–µ—Ä–µ–Ω–Ω–æ–µ", "üåä –†–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ–µ"],
                ["üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                "üé≠ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –∏ —è –ø–æ–¥–±–µ—Ä—É –∏–¥–µ–∞–ª—å–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å:",
                reply_markup=reply_markup,
                parse_mode='MarkdownV2'
            )
            return
        elif text == "üìñ –†–µ—Ü–µ–ø—Ç—ã":
            query = "–ü–æ–∫–∞–∂–∏ —Ä–µ—Ü–µ–ø—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –±–∞—Ä–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞ —Å –ø–æ—à–∞–≥–æ–≤—ã–º –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ–º"

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        elif text == "üòä –í–µ—Å–µ–ª–æ–µ":
            query = "–ü—Ä–µ–¥–ª–æ–∂–∏ —è—Ä–∫–∏–π, –æ—Å–≤–µ–∂–∞—é—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞"
        elif text == "üòå –°–ø–æ–∫–æ–π–Ω–æ–µ":
            query = "–ü—Ä–µ–¥–ª–æ–∂–∏ –º—è–≥–∫–∏–π, —É—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è —Å–ø–æ–∫–æ–π–Ω–æ–≥–æ –≤–µ—á–µ—Ä–∞"
        elif text == "üî• –≠–Ω–µ—Ä–≥–∏—á–Ω–æ–µ":
            query = "–ü—Ä–µ–¥–ª–æ–∂–∏ –±–æ–¥—Ä—è—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è —ç–Ω–µ—Ä–≥–∏—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"
        elif text == "üí≠ –†–æ–º–∞–Ω—Ç–∏—á–Ω–æ–µ":
            query = "–ü—Ä–µ–¥–ª–æ–∂–∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π, –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"
        elif text == "üòé –£–≤–µ—Ä–µ–Ω–Ω–æ–µ":
            query = "–ü—Ä–µ–¥–ª–æ–∂–∏ —Å—Ç–∏–ª—å–Ω—ã–π, –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –±–∞—Ä–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"
        elif text == "üåä –†–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ–µ":
            query = "–ü—Ä–µ–¥–ª–æ–∂–∏ –ª–µ–≥–∫–∏–π, –æ—Å–≤–µ–∂–∞—é—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"
        elif text == "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
            keyboard = [["ü•§ –ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ"], ["üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "üìñ –†–µ—Ü–µ–ø—Ç—ã"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                "üç∏ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–∞—Ä–º–µ–Ω–∞:",
                reply_markup=reply_markup,
                parse_mode='MarkdownV2'
            )
            return

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–∏
        elif any(word in text.lower() for word in ["—Ä–∞—Å—Å–ª–∞–±", "–æ—Ç–¥–æ—Ö–Ω", "—Ä–µ–ª–∞–∫—Å", "—É—Å—Ç–∞–ª", "—Å—Ç—Ä–µ—Å—Å"]):
            query = "–ü—Ä–µ–¥–ª–æ–∂–∏ —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è —Å–Ω—è—Ç–∏—è —Å—Ç—Ä–µ—Å—Å–∞ –∏ –æ—Ç–¥—ã—Ö–∞"

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –±—é–¥–∂–µ—Ç–Ω—ã—Ö –∫–æ–∫—Ç–µ–π–ª—è—Ö
        elif any(word in text.lower() for word in ["–¥–µ—à–µ–≤", "–±—é–¥–∂–µ—Ç", "–Ω–µ–¥–æ—Ä–æ–≥", "–ø—Ä–æ—Å—Ç–æ–π", "—ç–∫–æ–Ω–æ–º–Ω"]):
            query = f"–ü—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–æ—Å—Ç–æ–π –∏ –±—é–¥–∂–µ—Ç–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å: {text}"

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞–º–∏
        elif any(word in text.lower() for word in ["—Ä–µ–¥–±—É–ª", "red bull", "—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫", "—ç–Ω–µ—Ä–≥–∏—è", "–±–æ–¥—Ä—è—â"]):
            query = f"–ü—Ä–µ–¥–ª–æ–∂–∏ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å –∏–ª–∏ –Ω–∞–ø–∏—Ç–æ–∫: {text}"
        else:
            query = text

        # –í—ã–∑–æ–≤ RAG pipeline (async wrapper)
        # async_answer_user_query –≤—ã–ø–æ–ª–Ω—è–µ—Ç pre/post –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –Ω–∞—Ö–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç—ã –≤ vectorstore
        answer, meta = await async_answer_user_query(query, uid, k=3)

        # –ï—Å–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞ ‚Äî meta —Å–æ–¥–µ—Ä–∂–∏—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        if meta.get("blocked"):
            logger.info("–ó–∞–ø—Ä–æ—Å %s –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π: %s", uid, meta.get("reason"))
            logger.info("–ó–∞–ø—Ä–æ—Å –æ—Ç %s –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π: %s", user_info, meta.get("reason"))
            await update.message.reply_text(
                escape_markdown_v2(answer),
                parse_mode='MarkdownV2'
            )
            return

        # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        formatted_answer = format_bartender_response(answer)
        await update.message.reply_text(
            formatted_answer,
            parse_mode='MarkdownV2'
        )

        # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        if text.startswith(("üòä", "üòå", "üî•", "üí≠", "üòé", "üåä")):
            keyboard = [["ü•§ –ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ"], ["üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "üìñ –†–µ—Ü–µ–ø—Ç—ã"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                "üç∏ –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —á—Ç–æ\\-—Ç–æ –µ—â–µ\\?",
                reply_markup=reply_markup,
                parse_mode='MarkdownV2'
            )

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        logger.info("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", uid, answer[:200] + "..." if len(answer) > 200 else answer)
        logger.info("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s: %s", user_info, answer[:200] + "..." if len(answer) > 200 else answer)
        # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: retrieved=%s", uid, meta.get("retrieved_count"))
        logger.info("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: retrieved=%s", user_info, meta.get("retrieved_count"))
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ handle_message: %s", e)
        try:
            await update.message.reply_text(
                "üòÖ –ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ\\-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑\\.",
                parse_mode='MarkdownV2'
            )
        except Exception:
            pass

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    logger.info("üîß –°–æ–∑–¥–∞—é JWT –∏ –ø–æ–ª—É—á–∞—é IAM_TOKEN...")
    logger.info("üîë JWT —Å–æ–∑–¥–∞–Ω, IAM_TOKEN –ø–æ–ª—É—á–µ–Ω")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å
    force_rebuild = os.getenv("FORCE_REBUILD_INDEX", "").lower() in ["true", "1", "yes"]

    try:
        if not force_rebuild:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
            from incremental_rag import update_rag_incremental

            try:
                incremental_success = update_rag_incremental("vedroo")
                if incremental_success:
                    logger.info("‚úÖ –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.warning("‚ö†Ô∏è –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤—ã–ø–æ–ª–Ω—è—é –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫—É")
                    raise Exception("Incremental update failed")
            except Exception as e:
                logger.info("üìö –í—ã–ø–æ–ª–Ω—è—é –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫—É –∏–Ω–¥–µ–∫—Å–∞...")
                build_bartender_index_from_bucket("vedroo", "")
                logger.info("üìö –ù–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω –∏–∑ –±–∞–∫–µ—Ç–∞")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
            from rag_yandex_nofaiss import load_vectorstore
            mat, docs = load_vectorstore()
            logger.info("üìö –í–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∑–∞–≥—Ä—É–∂–µ–Ω (%d –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)", len(docs))
        else:
            logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω–¥–µ–∫—Å–∞...")
            build_bartender_index_from_bucket("vedroo", "")
            logger.info("üìö –ù–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω –∏–∑ –±–∞–∫–µ—Ç–∞")
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∏–Ω–¥–µ–∫—Å–æ–º: %s", e)
        logger.info("üìö –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏–∑ S3 –±–∞–∫–µ—Ç–∞...")
        logger.info("üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∫–µ—Ç–µ vedroo...")

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –µ—Å—Ç—å –≤ –±–∞–∫–µ—Ç–µ
        try:
            import boto3
            from settings import S3_ENDPOINT, S3_ACCESS_KEY, S3_SECRET_KEY

            s3 = boto3.client(
                "s3",
                endpoint_url=S3_ENDPOINT,
                aws_access_key_id=S3_ACCESS_KEY,
                aws_secret_access_key=S3_SECRET_KEY,
            )
            response = s3.list_objects_v2(Bucket="vedroo", Prefix="")
            contents = response.get("Contents") or []

            logger.info("üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∫–µ—Ç–µ: %d", len(contents))
            csv_count = sum(1 for obj in contents if obj.get("Key", "").lower().endswith('.csv'))
            pdf_count = sum(1 for obj in contents if obj.get("Key", "").lower().endswith('.pdf'))
            other_count = len(contents) - csv_count - pdf_count

            logger.info("üìä CSV —Ñ–∞–π–ª–æ–≤: %d", csv_count)
            logger.info("üìÑ PDF —Ñ–∞–π–ª–æ–≤: %d", pdf_count)
            logger.info("üìã –î—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤: %d", other_count)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ñ–∞–π–ª–æ–≤
            for obj in contents:
                key = obj.get("Key")
                size = obj.get("Size")
                if key:
                    logger.info("üìé –§–∞–π–ª: %s (%d –±–∞–π—Ç)", key, size)

        except Exception as bucket_error:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∫–µ—Ç–∞: %s", bucket_error)

        # –°—Ç—Ä–æ–∏–º –∏–Ω–¥–µ–∫—Å
        build_bartender_index_from_bucket("vedroo", "")
        logger.info("üìö –ù–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω –∏–∑ –±–∞–∫–µ—Ç–∞")

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("üç∏ –ò–ò –ë–∞—Ä–º–µ–Ω –∑–∞–ø—É—â–µ–Ω (polling)...")
    application.run_polling()

if __name__ == "__main__":
    main()