import os
import requests
import threading
import logging
import asyncio
import json
from datetime import datetime
from dotenv import load_dotenv
from fastapi import FastAPI
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(
            f"bot_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log",
            encoding='utf-8'
        ),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CLIENT_ID = os.getenv("CLIENT_ID")
CLIENT_SECRET = os.getenv("CLIENT_SECRET")
REDIRECT_URI = os.getenv("REDIRECT_URI", "http://localhost:8000/callback")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}
# {
#   user_id: {
#       authorized: True/False,
#       role: "seeker"/"employer",
#       tokens: {...},
#       me: {...},
#       items: [...],
#       page: 0,
#       current_mode: "browse"/"edit"/"create",
#       edit_data: {...},
#       waiting_for_input: None/"title"/"salary"/"experience" –∏ —Ç.–¥.
#   }
# }

# FastAPI —Å–µ—Ä–≤–µ—Ä
api = FastAPI()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É –ø–æ—Ç–æ–∫–∞–º–∏
application = None
bot_loop = None


# --- –•–ï–õ–ü–ï–†–´ ---
def format_salary(salary):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—É, –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è None"""
    if not salary:
        return "‚Äî"
    frm = salary.get("from") or ""
    to = salary.get("to") or ""
    cur = salary.get("currency") or ""
    if frm and to:
        return f"{frm}‚Äì{to} {cur}"
    if frm:
        return f"–æ—Ç {frm} {cur}"
    if to:
        return f"–¥–æ {to} {cur}"
    return cur or "‚Äî"


def safe_get_experience(exp):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–æ—Å—Ç–∞—ë–º –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"""
    if not exp:
        return "‚Äî"
    if isinstance(exp, dict):
        return exp.get("name", "‚Äî")
    if isinstance(exp, list):
        return ", ".join([e.get("name", "‚Äî") for e in exp if isinstance(e, dict)])
    return str(exp)


def format_resume_detailed(resume):
    """–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ"""
    text = f"üìÑ {resume.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n\n"

    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    text += f"üíº –ó–∞—Ä–ø–ª–∞—Ç–∞: {format_salary(resume.get('salary'))}\n"
    text += f"üåç –ì–æ—Ä–æ–¥: {resume.get('area', {}).get('name', '‚Äî')}\n"
    text += f"‚≠ê –û–ø—ã—Ç: {safe_get_experience(resume.get('experience'))}\n"
    text += f"üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {resume.get('updated_at', '‚Äî')[:10]}\n"
    text += f"üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {resume.get('views_count', 0)}\n"
    text += f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {resume.get('contact', [{}])[0].get('value', '‚Äî') if resume.get('contact') else '‚Äî'}\n"

    # –ù–∞–≤—ã–∫–∏
    skills = resume.get('skill_set', [])
    if skills:
        text += f"\nüîß –ù–∞–≤—ã–∫–∏: {', '.join(skills[:5])}"
        if len(skills) > 5:
            text += f" –∏ –µ—â—ë {len(skills) - 5}"
        text += "\n"

    # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    education = resume.get('education', {})
    if education.get('level'):
        text += f"üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {education['level'].get('name', '‚Äî')}\n"

    # –°—Ç–∞—Ç—É—Å
    status = resume.get('status', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    text += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"

    return text


def send_message_sync(chat_id: int, text: str, reply_markup=None):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π event loop"""
    if bot_loop and application:
        asyncio.run_coroutine_threadsafe(
            _send_message_async(chat_id, text, reply_markup),
            bot_loop
        )


async def _send_message_async(chat_id: int, text: str, reply_markup=None):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await application.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")


async def send_message(bot, chat_id: int, text: str, reply_markup=None, parse_mode='HTML'):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞"""
    try:
        await bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")


# --- API HH –§–£–ù–ö–¶–ò–ò ---
def get_my_resumes(access_token: str):
    try:
        url = "https://api.hh.ru/resumes/mine"
        headers = {"Authorization": f"Bearer {access_token}"}
        resp = requests.get(url, headers=headers)
        if resp.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—é–º–µ: {resp.status_code}")
            return None
        return resp.json()
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—é–º–µ: {e}")
        return None


def get_resume_by_id(access_token: str, resume_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∑—é–º–µ"""
    try:
        url = f"https://api.hh.ru/resumes/{resume_id}"
        headers = {"Authorization": f"Bearer {access_token}"}
        resp = requests.get(url, headers=headers)
        if resp.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—é–º–µ {resume_id}: {resp.status_code}")
            return None
        return resp.json()
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—é–º–µ {resume_id}: {e}")
        return None


def create_resume(access_token: str, resume_data: dict):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ"""
    try:
        url = "https://api.hh.ru/resumes"
        headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json"
        }
        resp = requests.post(url, headers=headers, json=resume_data)
        if resp.status_code not in [201, 200]:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ: {resp.status_code}, {resp.text}")
            return None
        return resp.json()
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ: {e}")
        return None


def update_resume(access_token: str, resume_id: str, resume_data: dict):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ"""
    try:
        url = f"https://api.hh.ru/resumes/{resume_id}"
        headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json"
        }
        resp = requests.put(url, headers=headers, json=resume_data)
        if resp.status_code not in [200, 204]:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—é–º–µ {resume_id}: {resp.status_code}, {resp.text}")
            return None
        return True
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑—é–º–µ {resume_id}: {e}")
        return None


def delete_resume(access_token: str, resume_id: str):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ"""
    try:
        url = f"https://api.hh.ru/resumes/{resume_id}"
        headers = {"Authorization": f"Bearer {access_token}"}
        resp = requests.delete(url, headers=headers)
        if resp.status_code not in [204, 200]:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∑—é–º–µ {resume_id}: {resp.status_code}")
            return False
        return True
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–∑—é–º–µ {resume_id}: {e}")
        return False


def get_my_vacancies(access_token: str, employer_id: int, page: int = 0, per_page: int = 20):
    try:
        url = f"https://api.hh.ru/employers/{employer_id}/vacancies"
        params = {"page": page, "per_page": per_page}
        headers = {"Authorization": f"Bearer {access_token}"}
        resp = requests.get(url, headers=headers, params=params)
        if resp.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π: {resp.status_code}")
            return None
        return resp.json()
    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
        return None


# --- –§–£–ù–ö–¶–ò–ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø ---
def show_current_item_sync(user_id: int):
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ FastAPI"""
    if bot_loop:
        asyncio.run_coroutine_threadsafe(
            show_current_item(user_id),
            bot_loop
        )


async def show_current_item(user_id: int):
    try:
        st = user_states.get(user_id)
        if not st:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return

        items = st.get("items", [])
        page = st.get("page", 0)
        if not items:
            await send_message(application.bot, user_id, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
            return

        role = st.get("role")
        item = items[page]

        if role == "seeker":
            # –î–ª—è —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—é–º–µ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
            await show_resume_management(user_id, item)
        else:
            # –î–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é
            text = (
                f"üè¢ –í–∞–∫–∞–Ω—Å–∏—è {page + 1}/{len(items)}:\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {item.get('name', '')}\n"
                f"–ö–æ–º–ø–∞–Ω–∏—è: {item.get('employer', {}).get('name', '')}\n"
                f"–ì–æ—Ä–æ–¥: {item.get('area', {}).get('name', '')}\n"
                f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {format_salary(item.get('salary'))}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {item.get('snippet', {}).get('requirement', '')}"
            )

            keyboard = [["‚èÆ –ù–∞–∑–∞–¥", "‚è≠ –í–ø–µ—Ä—ë–¥"], ["üîç –ü–æ–∏—Å–∫"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await send_message(application.bot, user_id, text, reply_markup=reply_markup)

        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω —ç–ª–µ–º–µ–Ω—Ç {page} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


async def show_resume_management(user_id: int, resume: dict):
    """–ü–æ–∫–∞–∑ —Ä–µ–∑—é–º–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    try:
        st = user_states.get(user_id, {})
        items = st.get("items", [])
        page = st.get("page", 0)

        text = f"üìÑ –†–µ–∑—é–º–µ {page + 1}/{len(items)}:\n"
        text += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {resume.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
        text += f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {format_salary(resume.get('salary'))}\n"
        text += f"–ì–æ—Ä–æ–¥: {resume.get('area', {}).get('name', '‚Äî')}\n"
        text += f"–û–ø—ã—Ç: {safe_get_experience(resume.get('experience'))}\n"
        text += f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {resume.get('updated_at', '‚Äî')[:10]}\n"

        # Inline –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—é–º–µ
        inline_keyboard = [
            [
                InlineKeyboardButton("üëÅ –î–µ—Ç–∞–ª–∏", callback_data=f"resume_details:{resume['id']}"),
                InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"resume_edit:{resume['id']}")
            ],
            [
                InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"resume_delete:{resume['id']}"),
                InlineKeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"resume_copy:{resume['id']}")
            ]
        ]
        inline_markup = InlineKeyboardMarkup(inline_keyboard)

        # –û–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = [
            ["‚èÆ –ù–∞–∑–∞–¥", "‚è≠ –í–ø–µ—Ä—ë–¥"],
            ["‚ûï –ù–æ–≤–æ–µ —Ä–µ–∑—é–º–µ", "üîç –ü–æ–∏—Å–∫"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await send_message(
            application.bot,
            user_id,
            text,
            reply_markup=reply_markup
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
        await application.bot.send_message(
            chat_id=user_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=inline_markup
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—é–º–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


async def show_resume_details(user_id: int, resume_id: str):
    """–ü–æ–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∑—é–º–µ"""
    try:
        st = user_states.get(user_id)
        if not st or not st.get("authorized"):
            await send_message(application.bot, user_id, "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            return

        access_token = st["tokens"]["access_token"]
        resume = get_resume_by_id(access_token, resume_id)

        if not resume:
            await send_message(application.bot, user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—é–º–µ")
            return

        text = format_resume_detailed(resume)

        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        inline_keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_list")]]
        inline_markup = InlineKeyboardMarkup(inline_keyboard)

        await send_message(application.bot, user_id, text, reply_markup=inline_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π —Ä–µ–∑—é–º–µ {resume_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


async def start_resume_creation(user_id: int):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ"""
    try:
        st = user_states.get(user_id, {})
        st["current_mode"] = "create"
        st["edit_data"] = {
            "title": "",
            "salary": {"amount": None, "currency": "RUR"},
            "experience": {"id": "noExperience"},
            "skills": [],
            "contacts": []
        }
        st["waiting_for_input"] = "title"

        await send_message(
            application.bot,
            user_id,
            "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


async def start_resume_editing(user_id: int, resume_id: str):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—é–º–µ"""
    try:
        st = user_states.get(user_id)
        if not st or not st.get("authorized"):
            await send_message(application.bot, user_id, "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            return

        access_token = st["tokens"]["access_token"]
        resume = get_resume_by_id(access_token, resume_id)

        if not resume:
            await send_message(application.bot, user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—é–º–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        st["current_mode"] = "edit"
        st["edit_resume_id"] = resume_id
        st["edit_data"] = {
            "title": resume.get("title", ""),
            "salary": resume.get("salary", {}),
            "experience": resume.get("experience", {}),
            "skills": resume.get("skill_set", []),
        }

        text = "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:"

        inline_keyboard = [
            [InlineKeyboardButton("üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_title")],
            [InlineKeyboardButton("üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞", callback_data="edit_salary")],
            [InlineKeyboardButton("‚≠ê –û–ø—ã—Ç", callback_data="edit_experience")],
            [InlineKeyboardButton("üîß –ù–∞–≤—ã–∫–∏", callback_data="edit_skills")],
            [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_resume")],
            [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_list")]
        ]
        inline_markup = InlineKeyboardMarkup(inline_keyboard)

        await send_message(application.bot, user_id, text, reply_markup=inline_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—é–º–µ {resume_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


async def handle_text_input(user_id: int, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
    try:
        st = user_states.get(user_id, {})
        waiting_for = st.get("waiting_for_input")

        if not waiting_for:
            return False  # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –≤–≤–æ–¥

        edit_data = st.get("edit_data", {})

        if waiting_for == "title":
            edit_data["title"] = text
            if st.get("current_mode") == "create":
                st["waiting_for_input"] = "salary"
                await send_message(
                    application.bot,
                    user_id,
                    f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {text}\n\n–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∑–∞—Ä–ø–ª–∞—Ç—É (–∏–ª–∏ 0 –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
                )
            else:
                st["waiting_for_input"] = None
                await send_message(application.bot, user_id, f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {text}")
                await start_resume_editing(user_id, st.get("edit_resume_id"))

        elif waiting_for == "salary":
            try:
                salary_amount = int(text)
                if salary_amount > 0:
                    edit_data["salary"] = {"amount": salary_amount, "currency": "RUR"}
                else:
                    edit_data["salary"] = None

                if st.get("current_mode") == "create":
                    st["waiting_for_input"] = "skills"
                    await send_message(
                        application.bot,
                        user_id,
                        f"‚úÖ –ó–∞—Ä–ø–ª–∞—Ç–∞: {salary_amount if salary_amount > 0 else '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ):"
                    )
                else:
                    st["waiting_for_input"] = None
                    await send_message(application.bot, user_id, f"‚úÖ –ó–∞—Ä–ø–ª–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {salary_amount}")
                    await start_resume_editing(user_id, st.get("edit_resume_id"))
            except ValueError:
                await send_message(application.bot, user_id, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ 0:")

        elif waiting_for == "skills":
            if text.strip():
                skills = [skill.strip() for skill in text.split(",") if skill.strip()]
                edit_data["skills"] = skills
            else:
                edit_data["skills"] = []

            if st.get("current_mode") == "create":
                # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ
                await finish_resume_creation(user_id)
            else:
                st["waiting_for_input"] = None
                await send_message(application.bot, user_id, f"‚úÖ –ù–∞–≤—ã–∫–∏ –∏–∑–º–µ–Ω–µ–Ω—ã")
                await start_resume_editing(user_id, st.get("edit_resume_id"))

        return True  # –û–±—Ä–∞–±–æ—Ç–∞–ª–∏ –∫–∞–∫ –≤–≤–æ–¥

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False


async def finish_resume_creation(user_id: int):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ"""
    try:
        st = user_states.get(user_id)
        if not st or st.get("current_mode") != "create":
            return

        access_token = st["tokens"]["access_token"]
        edit_data = st["edit_data"]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ
        resume_data = {
            "title": edit_data["title"],
            "area": {"id": "1"},  # –ú–æ—Å–∫–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "experience": {"id": "noExperience"},
            "education": {"level": {"id": "higher"}},
            "language": [{"id": "ru", "level": {"id": "native"}}],
            "schedule": {"id": "fullDay"},
            "employment": [{"id": "full"}],
            "contacts": [{"type": {"id": "phone"}, "value": "+7"}]
        }

        if edit_data.get("salary") and edit_data["salary"].get("amount"):
            resume_data["salary"] = {
                "amount": edit_data["salary"]["amount"],
                "currency": edit_data["salary"]["currency"]
            }

        if edit_data.get("skills"):
            resume_data["skill_set"] = edit_data["skills"]

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—é–º–µ
        result = create_resume(access_token, resume_data)

        if result:
            await send_message(application.bot, user_id, "‚úÖ –†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ
            await refresh_resume_list(user_id)
        else:
            await send_message(application.bot, user_id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        st["current_mode"] = "browse"
        st["waiting_for_input"] = None
        st["edit_data"] = {}

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


async def save_resume_changes(user_id: int):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–µ–∑—é–º–µ"""
    try:
        st = user_states.get(user_id)
        if not st or st.get("current_mode") != "edit":
            return

        access_token = st["tokens"]["access_token"]
        resume_id = st.get("edit_resume_id")
        edit_data = st["edit_data"]

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–µ–∑—é–º–µ
        current_resume = get_resume_by_id(access_token, resume_id)
        if not current_resume:
            await send_message(application.bot, user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—é–º–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è
        update_data = {}

        if edit_data.get("title"):
            update_data["title"] = edit_data["title"]

        if edit_data.get("salary"):
            update_data["salary"] = edit_data["salary"]

        if edit_data.get("skills"):
            update_data["skill_set"] = edit_data["skills"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if update_data:
            result = update_resume(access_token, resume_id, update_data)
            if result:
                await send_message(application.bot, user_id, "‚úÖ –†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
                await refresh_resume_list(user_id)
            else:
                await send_message(application.bot, user_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—é–º–µ")
        else:
            await send_message(application.bot, user_id, "‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        st["current_mode"] = "browse"
        st["waiting_for_input"] = None
        st["edit_data"] = {}
        st.pop("edit_resume_id", None)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–µ–∑—é–º–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


async def delete_resume_confirm(user_id: int, resume_id: str):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∑—é–º–µ"""
    try:
        text = "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Ä–µ–∑—é–º–µ?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."

        inline_keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete:{resume_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_list")
            ]
        ]
        inline_markup = InlineKeyboardMarkup(inline_keyboard)

        await send_message(application.bot, user_id, text, reply_markup=inline_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∑—é–º–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


async def confirm_resume_deletion(user_id: int, resume_id: str):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ"""
    try:
        st = user_states.get(user_id)
        if not st or not st.get("authorized"):
            await send_message(application.bot, user_id, "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            return

        access_token = st["tokens"]["access_token"]

        if delete_resume(access_token, resume_id):
            await send_message(application.bot, user_id, "‚úÖ –†–µ–∑—é–º–µ —É–¥–∞–ª–µ–Ω–æ")
            await refresh_resume_list(user_id)
        else:
            await send_message(application.bot, user_id, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∑—é–º–µ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∑—é–º–µ {resume_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


async def refresh_resume_list(user_id: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–∑—é–º–µ"""
    try:
        st = user_states.get(user_id)
        if not st or not st.get("authorized"):
            return

        access_token = st["tokens"]["access_token"]
        resumes = get_my_resumes(access_token)

        if resumes and resumes.get("items"):
            st["items"] = resumes["items"]
            st["page"] = 0
            await show_current_item(user_id)
        else:
            st["items"] = []
            await send_message(application.bot, user_id, "üìã –£ –≤–∞—Å –Ω–µ—Ç —Ä–µ–∑—é–º–µ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∑—é–º–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


# --- CALLBACK HH ---
@api.get("/callback")
async def hh_callback(code: str, state: str):
    user_id = int(state)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
    token_url = "https://hh.ru/oauth/token"
    data = {
        "grant_type": "authorization_code",
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET,
        "code": code,
        "redirect_uri": REDIRECT_URI,
    }

    try:
        resp = requests.post(token_url, data=data)
        if resp.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: {resp.text}")
            return {"error": resp.text}

        tokens = resp.json()
        access_token = tokens.get("access_token")
        if not access_token:
            logger.error("–í –æ—Ç–≤–µ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç access_token")
            return {"error": "No access_token in response"}

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ
        me_resp = requests.get(
            "https://api.hh.ru/me",
            headers={"Authorization": f"Bearer {access_token}"}
        )
        if me_resp.status_code != 200:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {me_resp.text}")
            return {"error": me_resp.text}

        me_data = me_resp.json()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å
        role = None
        if me_data.get("is_applicant", False):
            role = "seeker"
        elif me_data.get("employer", None) is not None:
            role = "employer"
        else:
            role = "seeker"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        user_states[user_id] = {
            "authorized": True,
            "tokens": tokens,
            "role": role,
            "me": me_data,
            "items": [],
            "page": 0,
            "current_mode": "browse",
            "edit_data": {},
            "waiting_for_input": None
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π event loop
        role_text = "üë®‚Äçüíª –°–æ–∏—Å–∫–∞—Ç–µ–ª—å" if role == "seeker" else "üè¢ –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å"
        send_message_sync(
            user_id,
            f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ {role_text}"
        )

        if role == "seeker":
            resumes = get_my_resumes(access_token)
            if resumes and resumes.get("items"):
                user_states[user_id]["items"] = resumes["items"]
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(resumes['items'])} —Ä–µ–∑—é–º–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                show_current_item_sync(user_id)
            else:
                logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç —Ä–µ–∑—é–º–µ")
                send_message_sync(user_id,
                                  "‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—é–º–µ.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ûï –ù–æ–≤–æ–µ —Ä–µ–∑—é–º–µ' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
        else:
            employer = me_data.get("employer")
            if employer and employer.get("id"):
                vacancies = get_my_vacancies(access_token, employer["id"])
                if vacancies and vacancies.get("items"):
                    user_states[user_id]["items"] = vacancies["items"]
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(vacancies['items'])} –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    show_current_item_sync(user_id)
                else:
                    logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π")
                    send_message_sync(user_id, "‚ö†Ô∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π.")

        return {"status": "ok", "role": role}

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        return {"error": str(e)}


async def start_search_for_user(user_id: int):
    try:
        keyboard = [["üëç –õ–∞–π–∫", "üëé –î–∏–∑–ª–∞–π–∫", "‚è∏ –ü–∞—É–∑–∞"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await send_message(application.bot, user_id, "üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫‚Ä¶", reply_markup=reply_markup)
        logger.info(f"–ù–∞—á–∞—Ç –ø–æ–∏—Å–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


# --- TELEGRAM BOT HANDLERS ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        uid = update.effective_user.id
        user_states[uid] = {
            "authorized": False,
            "role": None,
            "tokens": None,
            "me": None,
            "items": [],
            "page": 0,
            "current_mode": "browse",
            "edit_data": {},
            "waiting_for_input": None
        }
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∑—é–º–µ –Ω–∞ HH.ru\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:\n"
            "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö —Ä–µ–∑—é–º–µ\n"
            "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ\n"
            "‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ä–µ–∑—é–º–µ\n"
            "üóë –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∑—é–º–µ\n"
            "üîç –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ HH.ru"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")


async def auth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        uid = update.effective_user.id
        auth_url = (
            f"https://hh.ru/oauth/authorize"
            f"?response_type=code"
            f"&client_id={CLIENT_ID}"
            f"&redirect_uri={REDIRECT_URI}"
            f"&state={uid}"
        )
        await update.message.reply_text(
            f"üîë –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n{auth_url}"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ auth: {e}")


async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
    try:
        query = update.callback_query
        await query.answer()

        uid = query.from_user.id
        data = query.data

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –Ω–∞–∂–∞–ª inline –∫–Ω–æ–ø–∫—É: {data}")

        if data.startswith("resume_details:"):
            resume_id = data.split(":", 1)[1]
            await show_resume_details(uid, resume_id)

        elif data.startswith("resume_edit:"):
            resume_id = data.split(":", 1)[1]
            await start_resume_editing(uid, resume_id)

        elif data.startswith("resume_delete:"):
            resume_id = data.split(":", 1)[1]
            await delete_resume_confirm(uid, resume_id)

        elif data.startswith("resume_copy:"):
            resume_id = data.split(":", 1)[1]
            # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ (—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ)
            await copy_resume(uid, resume_id)

        elif data.startswith("confirm_delete:"):
            resume_id = data.split(":", 1)[1]
            await confirm_resume_deletion(uid, resume_id)

        elif data == "back_to_list":
            st = user_states.get(uid, {})
            st["current_mode"] = "browse"
            st["waiting_for_input"] = None
            st["edit_data"] = {}
            await show_current_item(uid)

        elif data == "edit_title":
            st = user_states.get(uid, {})
            st["waiting_for_input"] = "title"
            await send_message(application.bot, uid, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:")

        elif data == "edit_salary":
            st = user_states.get(uid, {})
            st["waiting_for_input"] = "salary"
            await send_message(application.bot, uid, "üí∞ –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∑–∞—Ä–ø–ª–∞—Ç—É (–∏–ª–∏ 0 –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):")

        elif data == "edit_experience":
            await show_experience_options(uid)

        elif data == "edit_skills":
            st = user_states.get(uid, {})
            st["waiting_for_input"] = "skills"
            current_skills = ", ".join(st.get("edit_data", {}).get("skills", []))
            await send_message(
                application.bot,
                uid,
                f"üîß –¢–µ–∫—É—â–∏–µ –Ω–∞–≤—ã–∫–∏: {current_skills or '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:"
            )

        elif data == "save_resume":
            await save_resume_changes(uid)

        elif data.startswith("exp_"):
            exp_id = data.replace("exp_", "")
            st = user_states.get(uid, {})
            st["edit_data"]["experience"] = {"id": exp_id}
            await send_message(application.bot, uid, f"‚úÖ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –∏–∑–º–µ–Ω–µ–Ω")
            await start_resume_editing(uid, st.get("edit_resume_id"))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback query: {e}")


async def show_experience_options(user_id: int):
    """–ü–æ–∫–∞–∑ –æ–ø—Ü–∏–π –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã"""
    try:
        text = "‚≠ê –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:"

        inline_keyboard = [
            [InlineKeyboardButton("–ù–µ—Ç –æ–ø—ã—Ç–∞", callback_data="exp_noExperience")],
            [InlineKeyboardButton("–û—Ç 1 –≥–æ–¥–∞ –¥–æ 3 –ª–µ—Ç", callback_data="exp_between1And3")],
            [InlineKeyboardButton("–û—Ç 3 –¥–æ 6 –ª–µ—Ç", callback_data="exp_between3And6")],
            [InlineKeyboardButton("–ë–æ–ª–µ–µ 6 –ª–µ—Ç", callback_data="exp_moreThan6")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_edit")]
        ]
        inline_markup = InlineKeyboardMarkup(inline_keyboard)

        await send_message(application.bot, user_id, text, reply_markup=inline_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –æ–ø—Ü–∏–π –æ–ø—ã—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


async def copy_resume(user_id: int, resume_id: str):
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ–∑—é–º–µ"""
    try:
        st = user_states.get(user_id)
        if not st or not st.get("authorized"):
            await send_message(application.bot, user_id, "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            return

        access_token = st["tokens"]["access_token"]
        original_resume = get_resume_by_id(access_token, resume_id)

        if not original_resume:
            await send_message(application.bot, user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—é–º–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
        resume_data = {
            "title": f"{original_resume.get('title', '')} (–∫–æ–ø–∏—è)",
            "area": original_resume.get("area", {"id": "1"}),
            "experience": original_resume.get("experience", {"id": "noExperience"}),
            "education": original_resume.get("education", {"level": {"id": "higher"}}),
            "language": original_resume.get("language", [{"id": "ru", "level": {"id": "native"}}]),
            "schedule": original_resume.get("schedule", {"id": "fullDay"}),
            "employment": original_resume.get("employment", [{"id": "full"}]),
            "contacts": original_resume.get("contact", [{"type": {"id": "phone"}, "value": "+7"}])
        }

        if original_resume.get("salary"):
            resume_data["salary"] = original_resume["salary"]

        if original_resume.get("skill_set"):
            resume_data["skill_set"] = original_resume["skill_set"]

        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é
        result = create_resume(access_token, resume_data)

        if result:
            await send_message(application.bot, user_id, "‚úÖ –†–µ–∑—é–º–µ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!")
            await refresh_resume_list(user_id)
        else:
            await send_message(application.bot, user_id, "‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—é–º–µ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—é–º–µ {resume_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        uid = update.effective_user.id
        st = user_states.get(uid, {})
        text = update.message.text

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {repr(text)}")

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ–º –ª–∏ –º—ã —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
        if await handle_text_input(uid, text):
            return  # –û–±—Ä–∞–±–æ—Ç–∞–ª–∏ –∫–∞–∫ –≤–≤–æ–¥, –≤—ã—Ö–æ–¥–∏–º

        # –û–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if text == "‚èÆ –ù–∞–∑–∞–¥":
            if st.get("page", 0) > 0:
                st["page"] -= 1
                await show_current_item(uid)
            else:
                await update.message.reply_text("–í—ã –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")

        elif text == "‚è≠ –í–ø–µ—Ä—ë–¥":
            if st.get("page", 0) < len(st.get("items", [])) - 1:
                st["page"] += 1
                await show_current_item(uid)
            else:
                await update.message.reply_text("–í—ã –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")

        elif text == "‚ûï –ù–æ–≤–æ–µ —Ä–µ–∑—é–º–µ":
            if not st.get("authorized"):
                await update.message.reply_text("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (/auth)")
                return
            await start_resume_creation(uid)

        elif text == "üîç –ü–æ–∏—Å–∫":
            await start_search_for_user(uid)

        elif text == "üëç –õ–∞–π–∫":
            await update.message.reply_text("‚ù§Ô∏è –õ–∞–π–∫")

        elif text == "üëé –î–∏–∑–ª–∞–π–∫":
            await update.message.reply_text("‚ùå –î–∏–∑–ª–∞–π–∫")

        elif text == "‚è∏ –ü–∞—É–∑–∞":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ä–µ–∑—é–º–µ/–≤–∞–∫–∞–Ω—Å–∏–π
            if st.get("authorized") and st.get("items"):
                await show_current_item(uid)
            else:
                keyboard = [["üîç –ü–æ–∏—Å–∫"]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text("‚è∏ –ü–æ–∏—Å–∫ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=reply_markup)

        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")


def run_bot():
    global application, bot_loop
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –±–æ—Ç–∞
        bot_loop = asyncio.new_event_loop()
        asyncio.set_event_loop(bot_loop)

        application = Application.builder().token(TELEGRAM_TOKEN).build()

        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("auth", auth))
        application.add_handler(CallbackQueryHandler(handle_callback_query))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))

        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        application.run_polling()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot, daemon=True)
    bot_thread.start()

    # –î–∞–µ–º –≤—Ä–µ–º—è –±–æ—Ç—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
    import time

    time.sleep(2)

    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI
    import uvicorn

    uvicorn.run(api, host="0.0.0.0", port=8000)