#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# –ù–∞—à RAG –±–µ–∑ FAISS (—Å–º. rag_yandex_nofaiss.py)
from rag_yandex_nofaiss import async_answer_user_query, build_index_from_bucket

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
load_dotenv()

LOG_FILENAME = f"ai_bartender_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILENAME, encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    logger.error("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ .env")
    raise SystemExit("TELEGRAM_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ)
user_states = {}

DISCLAIMER = """
‚ö†Ô∏è –í–ê–ñ–ù–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï ‚ö†Ô∏è

üö´ –ß—Ä–µ–∑–º–µ—Ä–Ω–æ–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è –≤—Ä–µ–¥–∏—Ç –≤–∞—à–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é
üö´ –ê–ª–∫–æ–≥–æ–ª—å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω –ª–∏—Ü–∞–º –¥–æ 18 –ª–µ—Ç
üö´ –ë–µ—Ä–µ–º–µ–Ω–Ω—ã–º –∏ –∫–æ—Ä–º—è—â–∏–º –∂–µ–Ω—â–∏–Ω–∞–º
üö´ –õ–∏—Ü–∞–º —Å –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º–∏, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω –∞–ª–∫–æ–≥–æ–ª—å

‚ö° –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö
‚ö° –ú—ã –Ω–µ –ø—Ä–∏–∑—ã–≤–∞–µ–º –∫ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –∞–ª–∫–æ–≥–æ–ª—è
‚ö° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –∞–ª–∫–æ–≥–æ–ª—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ

–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏, –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" üëá
"""

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        uid = update.effective_user.id
        user_states[uid] = {"disclaimer_shown": True, "accepted_disclaimer": False}

        keyboard = [["‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

        await update.message.reply_text(f"üç∏ –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò –ë–∞—Ä–º–µ–Ω!\n\n{DISCLAIMER}", reply_markup=reply_markup)
        logger.info("User %s started bot", uid)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ start: %s", e)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        uid = update.effective_user.id
        text = (update.message.text or "").strip()
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–∞–ø–∏—Å–∞–ª: %s", uid, text)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ—Ç
        if uid not in user_states:
            user_states[uid] = {"disclaimer_shown": False, "accepted_disclaimer": False}

        # –ï—Å–ª–∏ –¥–∏—Å–∫–ª–µ–π–º–µ—Ä –Ω–µ –ø—Ä–∏–Ω—è—Ç ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
        if not user_states[uid].get("accepted_disclaimer", False):
            if text == "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
                user_states[uid]["accepted_disclaimer"] = True
                keyboard = [["üçπ –ö–æ–∫—Ç–µ–π–ª–∏", "ü•§ –ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ"], ["üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "üìñ –†–µ—Ü–µ–ø—Ç—ã"]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(
                    "üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–∞—Ä–º–µ–Ω!\n\n"
                    "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
                    reply_markup=reply_markup
                )
                return
            elif text == "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è":
                await update.message.reply_text("üòî –ñ–∞–ª—å ‚Äî –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ /start")
                return
            else:
                keyboard = [["‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è"]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
                await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏—è.", reply_markup=reply_markup)
                return

        # –ï—Å–ª–∏ –¥–∏—Å–∫–ª–µ–π–º–µ—Ä –ø—Ä–∏–Ω—è—Ç ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ RAG pipeline
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ ‚Äî –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø–æ–Ω—è—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        if text == "üçπ –ö–æ–∫—Ç–µ–π–ª–∏":
            query = "–ø–æ–¥–±–µ—Ä–∏ –∫–æ–∫—Ç–µ–π–ª—å –ø–æ –º–æ–µ–º—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é"
        elif text == "ü•§ –ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ":
            query = "–±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã"
        elif text == "üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ":
            query = "–ø–æ–¥—Å–∫–∞–∂–∏ –Ω–∞–ø–∏—Ç–æ–∫ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é"
        elif text == "üìñ –†–µ—Ü–µ–ø—Ç—ã":
            query = "–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –∫–æ–∫—Ç–µ–π–ª—è"
        else:
            query = text

        # –í—ã–∑–æ–≤ RAG pipeline (async wrapper)
        # async_answer_user_query –≤—ã–ø–æ–ª–Ω—è–µ—Ç pre/post –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –Ω–∞—Ö–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç—ã –≤ vectorstore
        answer, meta = await async_answer_user_query(query, uid, k=3)

        # –ï—Å–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞ ‚Äî meta —Å–æ–¥–µ—Ä–∂–∏—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        if meta.get("blocked"):
            logger.info("–ó–∞–ø—Ä–æ—Å %s –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π: %s", uid, meta.get("reason"))
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (answer —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞)
            await update.message.reply_text(answer)
            return

        # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await update.message.reply_text(answer)

        # –õ–æ–≥–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        logger.info("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s. meta: retrieved=%s", uid, meta.get("retrieved_count"))

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ handle_message: %s", e)
        try:
            await update.message.reply_text("üòÖ –ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        except Exception:
            pass

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    build_index_from_bucket("vedroo", "")
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("üç∏ –ò–ò –ë–∞—Ä–º–µ–Ω –∑–∞–ø—É—â–µ–Ω (polling)...")
    application.run_polling()

if __name__ == "__main__":
    main()
