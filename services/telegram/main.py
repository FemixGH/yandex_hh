#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram Bot Service - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
"""

import os
import logging
import asyncio
from typing import Optional

import httpx
from telegram import Update, ReplyKeyboardMarkup
from telegram.constants import ChatAction
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from fastapi import FastAPI, HTTPException, Request, Header
from pydantic import BaseModel, Field
import uvicorn

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ settings, –≥–¥–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–¥–≥—Ä—É–∑–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏–∑ Lockbox
try:
    import sys
    sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
    from settings import TELEGRAM_TOKEN
except Exception:
    TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

GATEWAY_URL = os.getenv("GATEWAY_URL", "http://gateway:8000")

# –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: polling (–ª–æ–∫–∞–ª—å–Ω–æ) –∏–ª–∏ webhook (–≤ –æ–±–ª–∞–∫–µ). –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî polling
USE_WEBHOOK = os.getenv("USE_WEBHOOK", "false").lower() in {"1", "true", "yes"}
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ü—É–±–ª–∏—á–Ω—ã–π URL API Gateway, –Ω–∞–ø—Ä–∏–º–µ—Ä: https://<id>.apigw.yandexcloud.net/telegram/webhook
WEBHOOK_SECRET_TOKEN = os.getenv("WEBHOOK_SECRET_TOKEN")  # –°–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–º, —á—Ç–æ –∑–∞–¥–∞–Ω –≤ setWebhook

if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º
app = FastAPI(
    title="Telegram Bot Service",
    description="–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞",
    version="1.0.0"
)

# ========================
# Pydantic –º–æ–¥–µ–ª–∏
# ========================

class TelegramMessage(BaseModel):
    """–ú–æ–¥–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram"""
    user_id: int
    chat_id: int
    text: str
    username: Optional[str] = None

class BotResponse(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞"""
    success: bool
    message: Optional[str] = None
    error: Optional[str] = None

# ========================
# HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è Gateway
# ========================

class GatewayClient:
    def __init__(self):
        self.client = httpx.AsyncClient()
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –±–∞–∑–æ–≤—ã–π URL, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω—ã—Ö —Å–ª—ç—à–µ–π –ø—Ä–∏ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏
        base = GATEWAY_URL or ""
        self.gateway_url = base.rstrip("/")

    async def ask_bartender(self, query: str, user_id: str) -> dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞—Ä–º–µ–Ω—Å–∫–æ–º—É –ò–ò —á–µ—Ä–µ–∑ Gateway"""
        try:
            response = await self.client.post(
                f"{self.gateway_url}/bartender/ask",
                json={
                    "query": query,
                    "user_id": user_id,
                    "k": 3,
                    "with_moderation": True
                },
                timeout=60.0
            )
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ Gateway: {e}")
            raise

gateway_client = GatewayClient()

# ========================
# Telegram Bot –ª–æ–≥–∏–∫–∞
# ========================

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2"""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    return text

def format_bartender_response(text: str) -> str:
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –±–∞—Ä–º–µ–Ω–∞"""
    text = escape_markdown_v2(text)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    lines = text.split('\n')
    formatted_lines = []

    for line in lines:
        line = line.strip()
        if not line:
            formatted_lines.append('')
            continue

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–æ–≤ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
        if line.startswith('\\-'):
            formatted_lines.append(f"üç∏ {line[2:].strip()}")
        elif '\\:' in line and len(line) < 100:
            # –ö–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –¥–≤–æ–µ—Ç–æ—á–∏–µ–º - –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            formatted_lines.append(f"*{line}*")
        else:
            formatted_lines.append(line)

    return '\n'.join(formatted_lines)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {user.first_name}\\! üç∏

–Ø *–ò–ò –ë–∞—Ä–º–µ–Ω* \\- —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∏—Ä–µ –∫–æ–∫—Ç–µ–π–ª–µ–π\\!

*–ß—Ç–æ —è —É–º–µ—é:*
üçπ –ü–æ–¥–±–∏—Ä–∞—Ç—å –∫–æ–∫—Ç–µ–π–ª–∏ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º
ü•É –†–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ –Ω–∞–ø–∏—Ç–∫–∞—Ö –∏ –∏—Ö –∏—Å—Ç–æ—Ä–∏–∏  
üìñ –î–∞–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –∏ –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –∫–æ–∫—Ç–µ–π–ª–µ–π
üéØ –°–æ–≤–µ—Ç–æ–≤–∞—Ç—å –Ω–∞–ø–∏—Ç–∫–∏ –ø–æ–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ

*–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ "–ö–æ–∫—Ç–µ–π–ª—å —Å –≤–æ–¥–∫–æ–π –∏ –ª–∞–π–º–æ–º"
‚Ä¢ "–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∏–∑ –≤–∏—Å–∫–∏?"
‚Ä¢ "–†–µ—Ü–µ–ø—Ç –ú–æ—Ö–∏—Ç–æ"
‚Ä¢ "–ö–æ–∫—Ç–µ–π–ª—å –¥–ª—è —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–µ—á–µ—Ä–∞"

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç\\! üöÄ
"""

    keyboard = [
        ["üç∏ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏", "ü•É –ü–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º"],
        ["üìö –ö–ª–∞—Å—Å–∏–∫–∞", "üé≤ –°–ª—É—á–∞–π–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å"],
        ["‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False, resize_keyboard=True)

    await update.message.reply_text(
        welcome_text,
        parse_mode='MarkdownV2',
        reply_markup=reply_markup
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*

üî∏ *–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å* \\- —è –Ω–∞–π–¥—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–æ–∫—Ç–µ–π–ª–∏
üî∏ *–£–∫–∞–∂–∏—Ç–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã* \\- –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç—ã —Å –Ω–∏–º–∏
üî∏ *–°–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å* \\- —É–∑–Ω–∞–µ—Ç–µ —Ä–µ—Ü–µ–ø—Ç –∏ –∏—Å—Ç–æ—Ä–∏—é

*–ü—Ä–∏–º–µ—Ä—ã:*
‚Ä¢ "–ö–æ–∫—Ç–µ–π–ª–∏ —Å –¥–∂–∏–Ω–æ–º"
‚Ä¢ "–†–µ—Ü–µ–ø—Ç –ú–∞—Ä–≥–∞—Ä–∏—Ç—ã"  
‚Ä¢ "–ß—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω–∫—É?"
‚Ä¢ "–ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏"

*–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏* –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\\!
"""

    await update.message.reply_text(help_text, parse_mode='MarkdownV2')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    message = update.message
    user_text = message.text

    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id} ({user.username}): {user_text}")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if user_text == "üç∏ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏":
        user_text = "–ü–æ–∫–∞–∂–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏"
    elif user_text == "ü•É –ü–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º":
        await message.reply_text(
            "–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —É –≤–∞—Å –µ—Å—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\"–ö–æ–∫—Ç–µ–π–ª–∏ —Å –≤–æ–¥–∫–æ–π –∏ –ª–∏–º–æ–Ω–æ–º\""
        )
        return
    elif user_text == "üìö –ö–ª–∞—Å—Å–∏–∫–∞":
        user_text = "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∫–æ–∫—Ç–µ–π–ª–∏ –∏ –∏—Ö —Ä–µ—Ü–µ–ø—Ç—ã"
    elif user_text == "üé≤ –°–ª—É—á–∞–π–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å":
        user_text = "–ü—Ä–µ–¥–ª–æ–∂–∏ —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å"
    elif user_text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await help_command(update, context)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action=ChatAction.TYPING)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Gateway
        response = await gateway_client.ask_bartender(user_text, str(user.id))

        if response.get("blocked", False):
            await message.reply_text(
                f"‚ùå {response.get('reason', '–ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π')}"
            )
            return

        answer = response.get("answer", "")
        if not answer:
            await message.reply_text("ü§î –ù–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å.")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        formatted_answer = format_bartender_response(answer)

        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(formatted_answer) > 4000:
            parts = []
            current_part = ""

            for line in formatted_answer.split('\n'):
                if len(current_part + line + '\n') > 4000:
                    if current_part:
                        parts.append(current_part.rstrip())
                        current_part = line + '\n'
                    else:
                        parts.append(line)
                else:
                    current_part += line + '\n'

            if current_part:
                parts.append(current_part.rstrip())

            for i, part in enumerate(parts):
                if i == 0:
                    await message.reply_text(part, parse_mode='MarkdownV2')
                else:
                    await message.reply_text(part, parse_mode='MarkdownV2')

                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
                await asyncio.sleep(0.5)
        else:
            await message.reply_text(formatted_answer, parse_mode='MarkdownV2')

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        processing_time = response.get("processing_time", 0)
        if processing_time > 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã–ª–∞ –¥–æ–ª–≥–æ–π
            await message.reply_text(f"‚è± –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time:.1f}—Å")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.reply_text(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
        )

# ========================
# Telegram Bot Application
# ========================

telegram_app = None

async def setup_bot():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
    global telegram_app

    telegram_app = Application.builder().token(TELEGRAM_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    telegram_app.add_handler(CommandHandler("start", start))
    telegram_app.add_handler(CommandHandler("help", help_command))
    telegram_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    await telegram_app.initialize()
    await telegram_app.start()

    if USE_WEBHOOK and WEBHOOK_URL:
        # –í –æ–±–ª–∞–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook
        await telegram_app.bot.set_webhook(url=WEBHOOK_URL, secret_token=WEBHOOK_SECRET_TOKEN)
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    else:
        # –õ–æ–∫–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
        try:
            await telegram_app.bot.delete_webhook(drop_pending_updates=True)
        except Exception:
            pass
        if getattr(telegram_app, 'updater', None) is not None:
            await telegram_app.updater.start_polling()
            logger.info("Polling –∑–∞–ø—É—â–µ–Ω")
        else:
            logger.warning("Updater –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ—Ä—Å–∏—é python-telegram-bot.")

    logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")

async def shutdown_bot():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞"""
    global telegram_app
    if telegram_app:
        if USE_WEBHOOK and WEBHOOK_URL:
            try:
                await telegram_app.bot.delete_webhook()
            except Exception:
                pass
        else:
            if getattr(telegram_app, 'updater', None) is not None:
                try:
                    await telegram_app.updater.stop()
                except Exception:
                    pass
        await telegram_app.stop()
        await telegram_app.shutdown()
        logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# ========================
# FastAPI —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
# ========================

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "service": "Telegram Bot Service",
        "version": "1.0.0",
        "status": "active"
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    global telegram_app
    return {
        "status": "healthy" if telegram_app else "starting",
        "bot_running": telegram_app is not None,
        "mode": "webhook" if USE_WEBHOOK and WEBHOOK_URL else "polling"
    }

@app.post("/send_message")
async def send_message(chat_id: int, text: str, parse_mode: str = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
    global telegram_app

    if not telegram_app:
        raise HTTPException(status_code=503, detail="–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")

    try:
        await telegram_app.bot.send_message(
            chat_id=chat_id,
            text=text,
            parse_mode=parse_mode
        )
        return {"success": True}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail=str(e))

# –í–µ–±—Ö—É–∫ –¥–ª—è Telegram (–¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ API Gateway/Serverless Containers)
@app.post("/telegram/webhook")
async def telegram_webhook(request: Request, x_telegram_bot_api_secret_token: Optional[str] = Header(default=None)):
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–∏—ë–º–∞ –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Telegram. –í–æ–∑–≤—Ä–∞—â–∞–µ–º ACK –±—ã—Å—Ç—Ä–æ, –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ."""
    global telegram_app

    if not (USE_WEBHOOK and WEBHOOK_URL):
        raise HTTPException(status_code=400, detail="Webhook —Ä–µ–∂–∏–º –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

    if WEBHOOK_SECRET_TOKEN:
        if not x_telegram_bot_api_secret_token or x_telegram_bot_api_secret_token != WEBHOOK_SECRET_TOKEN:
            raise HTTPException(status_code=403, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–µ–±—Ö—É–∫–∞")

    if not telegram_app:
        raise HTTPException(status_code=503, detail="–ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")

    try:
        data = await request.json()
        # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ø–¥–µ–π—Ç–∞ (–±–µ–∑ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        try:
            upd_type = data.get("message", {}).get("text") or data.get("callback_query", {}).get("data")
            logger.info("–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ—Ç Telegram (—Å–æ–∫—Ä.): %s", str(upd_type)[:120])
        except Exception:
            logger.info("–ü–æ–ª—É—á–µ–Ω –≤–µ–±—Ö—É–∫ –æ—Ç Telegram (–±–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–ª–∞)")

        update = Update.de_json(data, bot=telegram_app.bot)
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –≤–µ—Ä–Ω—É—Ç—å 200 OK
        asyncio.create_task(telegram_app.process_update(update))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))

    return {"ok": True}

# –ê–ª–∏–∞—Å –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø—É—Ç–∏, —á—Ç–æ–±—ã –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ gateway –ø–æ /telegram/webhook –ø–æ–ø–∞–¥–∞–ª–æ —Å—é–¥–∞ –∫–∞–∫ /webhook
@app.post("/webhook")
async def telegram_webhook_alias(request: Request, x_telegram_bot_api_secret_token: Optional[str] = Header(default=None)):
    return await telegram_webhook(request, x_telegram_bot_api_secret_token)

# ========================
# –°–æ–±—ã—Ç–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
# ========================

@app.on_event("startup")
async def startup_event():
    """–°–æ–±—ã—Ç–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    logger.info("–ó–∞–ø—É—Å–∫ Telegram Bot Service")
    await setup_bot()

@app.on_event("shutdown")
async def shutdown_event():
    """–°–æ–±—ã—Ç–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram Bot Service")
    await shutdown_bot()
    try:
        await gateway_client.client.aclose()
    except Exception:
        pass

# ========================
# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ========================

if __name__ == "__main__":
    # –î–ª—è Yandex Serverless Containers —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è PORT (–æ–±—ã—á–Ω–æ 8080)
    host = os.getenv("TELEGRAM_SERVICE_HOST", "0.0.0.0")
    port = int(os.getenv("PORT", os.getenv("TELEGRAM_SERVICE_PORT", "8001")))

    logger.info(f"–ó–∞–ø—É—Å–∫ Telegram Bot Service –Ω–∞ {host}:{port} (mode={'webhook' if USE_WEBHOOK and WEBHOOK_URL else 'polling'})")

    uvicorn.run(
        "main:app",
        host=host,
        port=port,
        reload=False,
        log_level="info"
    )
