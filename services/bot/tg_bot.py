#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from settings import TELEGRAM_TOKEN, ORCH_URL as ORCH_URL_RAW
from services.faiss.faiss import build_index, load_index, build_docs_from_s3
from services.rag.incremental_rag import update_rag_incremental, save_incremental_state, get_bucket_files
from services.orchestrator.orchestrator import query as orch_query_sync
from services.auth.auth import start_auth
import logging
import os
import asyncio
import re
import requests
from urllib.parse import urlparse
from datetime import datetime

logger = logging.getLogger(__name__)

# Normalize ORCH_URL (ensure scheme)
ORCH_URL = ORCH_URL_RAW
if ORCH_URL:
    parsed = urlparse(ORCH_URL)
    if not parsed.scheme:
        ORCH_URL = "http://" + ORCH_URL
        logger.info("Normalized ORCH_URL -> %s", ORCH_URL)
else:
    ORCH_URL = None
    logger.warning("ORCH_URL not configured; remote orchestrator calls disabled")

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ)
user_states = {}

def escape_markdown_v2(text: str) -> str:
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    for char in escape_chars:
        text = text.replace(char, f'\\{char}')
    return text

def format_bartender_response(text: str) -> str:
    if not text:
        return text or ""
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ (–¥–µ–ª–∞–µ–º –∂–∏—Ä–Ω—ã–º–∏)
    text = re.sub(r'^([–ê-–Ø–ÅA-Z][^:\n]*):?\s*$', r'*\1*', text, flags=re.MULTILINE)
    # –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
    text = re.sub(r'^- (.+)$', r'‚Ä¢ _\1_', text, flags=re.MULTILINE)
    # –®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
    text = re.sub(r'^(\d+)\.\s*(.+)$', r'*\1\.* \2', text, flags=re.MULTILINE)
    # –í—ã–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–ø–∏—Ç–∫–æ–≤ –∂–∏—Ä–Ω—ã–º
    drinks = ['–º–æ—Ö–∏—Ç–æ', '–º–∞—Ä—Ç–∏–Ω–∏', '–º–∞—Ä–≥–∞—Ä–∏—Ç–∞', '–ø–∏–Ω–∞ –∫–æ–ª–∞–¥–∞', '–∫–æ—Å–º–æ–ø–æ–ª–∏—Ç–µ–Ω', '–¥–∞–π–∫–∏—Ä–∏', '–∫–∞–π–ø–∏—Ä–∏–Ω—å—è', '–Ω–µ–≥—Ä–æ–Ω–∏', '–∞–ø–µ—Ä–æ–ª—å —Å–ø—Ä–∏—Ç—Ü', '–æ–ª–¥ —Ñ—ç—à–Ω']
    for drink in drinks:
        pattern = r'\b(' + re.escape(drink) + r')\b'
        text = re.sub(pattern, r'*\1*', text, flags=re.IGNORECASE)
    # –í—Ä–µ–º—è/—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    text = re.sub(r'\b(\d+\s*¬∞C|\d+\s*–≥—Ä–∞–¥—É—Å|\d+\s*–º–∏–Ω|\d+\s*—Å–µ–∫)\b', r'`\1`', text)
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–∞
    text = re.sub(r'\b(\d+\s*–º–ª|\d+\s*–≥|\d+\s*—Å—Ç\.?\s*–ª\.?|\d+\s*—á\.?\s*–ª\.?)\b', r'`\1`', text)
    return text

def get_user_info(update: Update) -> str:
    user = update.effective_user
    if not user:
        return "Unknown"
    parts = []
    if user.username: parts.append(f"@{user.username}")
    if user.first_name: parts.append(user.first_name)
    if user.last_name: parts.append(user.last_name)
    return f"{user.id} ({' '.join(parts)})" if parts else str(user.id)

DISCLAIMER = """
‚ö†Ô∏è –í–ê–ñ–ù–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï ‚ö†Ô∏è

üö´ –ß—Ä–µ–∑–º–µ—Ä–Ω–æ–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è –≤—Ä–µ–¥–∏—Ç –≤–∞—à–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é
üö´ –ê–ª–∫–æ–≥–æ–ª—å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω –ª–∏—Ü–∞–º –¥–æ 18 –ª–µ—Ç
üö´ –ë–µ—Ä–µ–º–µ–Ω–Ω—ã–º –∏ –∫–æ—Ä–º—è—â–∏–º –∂–µ–Ω—â–∏–Ω–∞–º
üö´ –õ–∏—Ü–∞–º —Å –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º–∏, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω –∞–ª–∫–æ–≥–æ–ª—å

‚ö° –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö
‚ö° –ú—ã –Ω–µ –ø—Ä–∏–∑—ã–≤–∞–µ–º –∫ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –∞–ª–∫–æ–≥–æ–ª—è
‚ö° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –∞–ª–∫–æ–≥–æ–ª—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ

–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏, –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" üëá
"""

# -----------------------
# Handlers
# -----------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        uid = update.effective_user.id
        user_states[uid] = {"disclaimer_shown": True, "accepted_disclaimer": False}
        keyboard = [["‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text(f"üç∏ –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò –ë–∞—Ä–º–µ–Ω!\n\n{DISCLAIMER}", reply_markup=reply_markup)
        logger.info("User %s started bot", uid)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ start: %s", e)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = None
    try:
        uid = update.effective_user.id
        text = (update.message.text or "").strip()
        query = text  # default
        user_info = get_user_info(update)
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–∞–ø–∏—Å–∞–ª: %s", uid, text)
        logger.debug("User info: %s", user_info)

        if uid not in user_states:
            user_states[uid] = {"disclaimer_shown": False, "accepted_disclaimer": False}

        # Disclaimer flow
        if not user_states[uid].get("accepted_disclaimer", False):
            if text == "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
                user_states[uid]["accepted_disclaimer"] = True
                keyboard = [["ü•§ –ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ"], ["üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "üìñ –†–µ—Ü–µ–ø—Ç—ã"]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(
                    "üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–∞—Ä–º–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ.",
                    reply_markup=reply_markup
                )
                return
            elif text == "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è":
                await update.message.reply_text("üòî –ñ–∞–ª—å ‚Äî –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ /start")
                return
            else:
                keyboard = [["‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è"]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
                await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏—è.", reply_markup=reply_markup)
                return

        # Button shortcuts -> map to query
        if text == "ü•§ –ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ":
            query = "–ü—Ä–µ–¥–ª–æ–∂–∏ –æ—Å–≤–µ–∂–∞—é—â–∏–π –±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –∏–ª–∏ –º–æ–∫—Ç–µ–π–ª—å —Å —Ä–µ—Ü–µ–ø—Ç–æ–º"
        elif text == "üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ":
            keyboard = [
                ["üòä –í–µ—Å–µ–ª–æ–µ", "üòå –°–ø–æ–∫–æ–π–Ω–æ–µ"],
                ["üî• –≠–Ω–µ—Ä–≥–∏—á–Ω–æ–µ", "üí≠ –†–æ–º–∞–Ω—Ç–∏—á–Ω–æ–µ"],
                ["üòé –£–≤–µ—Ä–µ–Ω–Ω–æ–µ", "üåä –†–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ–µ"],
                ["üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("üé≠ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:", reply_markup=reply_markup)
            return
        elif text == "üìñ –†–µ—Ü–µ–ø—Ç—ã":
            query = "–ü–æ–∫–∞–∂–∏ —Ä–µ—Ü–µ–ø—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ –±–∞—Ä–Ω–æ–≥–æ –Ω–∞–ø–∏—Ç–∫–∞ —Å –ø–æ—à–∞–≥–æ–≤—ã–º –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ–º"
        elif text == "üòä –í–µ—Å–µ–ª–æ–µ":
            query = "–ü—Ä–µ–¥–ª–æ–∂–∏ —è—Ä–∫–∏–π, –æ—Å–≤–µ–∂–∞—é—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞"
        elif text == "üòå –°–ø–æ–∫–æ–π–Ω–æ–µ":
            query = "–ü—Ä–µ–¥–ª–æ–∂–∏ –º—è–≥–∫–∏–π, —É—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è —Å–ø–æ–∫–æ–π–Ω–æ–≥–æ –≤–µ—á–µ—Ä–∞"
        elif text == "üî• –≠–Ω–µ—Ä–≥–∏—á–Ω–æ–µ":
            query = "–ü—Ä–µ–¥–ª–æ–∂–∏ –±–æ–¥—Ä—è—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è —ç–Ω–µ—Ä–≥–∏—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"
        elif text == "üí≠ –†–æ–º–∞–Ω—Ç–∏—á–Ω–æ–µ":
            query = "–ü—Ä–µ–¥–ª–æ–∂–∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π, –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"
        elif text == "üòé –£–≤–µ—Ä–µ–Ω–Ω–æ–µ":
            query = "–ü—Ä–µ–¥–ª–æ–∂–∏ —Å—Ç–∏–ª—å–Ω—ã–π, –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –±–∞—Ä–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"
        elif text == "üåä –†–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ–µ":
            query = "–ü—Ä–µ–¥–ª–æ–∂–∏ –ª–µ–≥–∫–∏–π, –æ—Å–≤–µ–∂–∞—é—â–∏–π –Ω–∞–ø–∏—Ç–æ–∫ –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"
        elif text == "üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é":
            keyboard = [["ü•§ –ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ"], ["üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "üìñ –†–µ—Ü–µ–ø—Ç—ã"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text("üç∏ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–∞—Ä–º–µ–Ω–∞:", reply_markup=reply_markup)
            return

        # ------------- call local orchestrator (synchronous) in threadpool -------------
        loop = asyncio.get_running_loop()
        try:
            # pass args directly to avoid lambda closure issues
            resp = await loop.run_in_executor(None, orch_query_sync, uid, query)
        except Exception as e:
            logger.exception("Local orchestrator call failed: %s", e)
            resp = None

        # If local orchestrator did not return anything, try remote ORCH_URL as fallback (optional)
        if not resp and ORCH_URL:
            try:
                r = requests.post(ORCH_URL, json={"user_id": uid, "text": query, "k": 3}, timeout=30)
                if r.status_code == 200:
                    resp = r.json()
                else:
                    logger.warning("Remote orchestrator returned status %s %s", r.status_code, r.text)
            except Exception as e:
                logger.exception("Remote orchestrator call failed: %s", e)

        if not resp:
            # Nothing returned from orchestrator
            answer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            formatted_answer = format_bartender_response(answer)
            await update.message.reply_text(formatted_answer)
            return

        # Handle moderation / blocked
        if resp.get("blocked"):
            reason = resp.get("reason", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞")
            logger.info("–ó–∞–ø—Ä–æ—Å %s –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π: %s", uid, reason)
            await update.message.reply_text(escape_markdown_v2(f"üö´ –ó–∞–ø—Ä–æ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π: {reason}"))
            return

        # Extract answer from resp reliably
        # Possible structures handled: {'answer': 'text'} or {'result': {'answer': ...}} or {'result': {'answer': {...}}}
        answer_candidate = None
        if isinstance(resp, dict):
            # top-level 'answer'
            answer_candidate = resp.get("answer") or resp.get("text") or None
            # nested 'result' -> 'answer'
            if not answer_candidate and isinstance(resp.get("result"), dict):
                rres = resp["result"]
                answer_candidate = rres.get("answer") or rres.get("text") or None
        else:
            # fallback string
            answer_candidate = str(resp)

        # If answer is a structured model response (dict/list) try to extract first string leaf
        def find_first_str(obj):
            if obj is None:
                return None
            if isinstance(obj, str):
                return obj
            if isinstance(obj, dict):
                for v in obj.values():
                    s = find_first_str(v)
                    if s:
                        return s
            if isinstance(obj, list):
                for v in obj:
                    s = find_first_str(v)
                    if s:
                        return s
            return None

        if isinstance(answer_candidate, (dict, list)):
            answer_text = find_first_str(answer_candidate) or ""
        else:
            answer_text = str(answer_candidate) if answer_candidate is not None else ""

        if not answer_text:
            answer_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å."

        # Format and send
        formatted_answer = format_bartender_response(answer_text)
        await update.message.reply_text(formatted_answer)

        logger.info("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s", uid)
        logger.debug("Answer preview: %s", answer_text[:300])

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ handle_message: %s", e)
        try:
            await update.message.reply_text("üòÖ –ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        except Exception:
            pass

# -----------------------
# Main
# -----------------------
def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # Initialize auth once at startup (fail early)
    try:
        start_auth()
    except Exception as e:
        logger.exception("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: %s", e)
        logger.error("–ó–∞–≤–µ—Ä—à–∞—é –∑–∞–ø—É—Å–∫ ‚Äî –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ.")
        return

    application = Application.builder().token(TELEGRAM_TOKEN).build()
    force_rebuild = os.getenv("FORCE_REBUILD_INDEX", "").lower() in ["true", "1", "yes"]

    try:
        if not force_rebuild:
            logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
            try:
                incremental_success = update_rag_incremental("vedroo")
                if incremental_success:
                    logger.info("‚úÖ –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.warning("‚ö†Ô∏è –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤—ã–ø–æ–ª–Ω—è—é –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫—É")
                    # full rebuild
                    bucket_name = "vedroo"
                    docs = build_docs_from_s3(bucket_name, "")
                    if docs:
                        ok = build_index(docs)
                        if ok:
                            # --- Build mapping of processed source files -> last_modified (ISO) ---
                            try:
                                # get list of files currently in bucket (key -> info)
                                bucket_files = {f["key"]: f for f in get_bucket_files(bucket_name)}
                                processed = {}
                                for d in docs:
                                    src = d.get("meta", {}).get("source")
                                    if not src:
                                        continue
                                    if src in processed:
                                        continue
                                    info = bucket_files.get(src)
                                    processed[src] = {
                                        "hash": None,  # we don't compute hash here; last_modified is enough for incremental check
                                        "last_modified": info.get("last_modified") if info else None
                                    }

                                state = {"processed_files": processed, "last_update": datetime.now().isoformat()}
                                save_incremental_state(state)
                                logger.info("Incremental state updated with %d files after full rebuild", len(processed))
                            except Exception as e:
                                logger.exception("Failed to update incremental state after full rebuild: %s", e)
                        else:
                            logger.error("build_index failed during full rebuild")
            except Exception as e:
                logger.exception("–û—à–∏–±–∫–∞ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –¥–µ–ª–∞—é –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫—É: %s", e)
                build_docs_from_s3("vedroo", "")

        else:
            logger.info("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω–¥–µ–∫—Å–∞...")
            build_docs_from_s3("vedroo", "")

        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω–¥–µ–∫—Å (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å)
        try:
            index, vectors, docs = load_index()
            logger.info("üìö –í–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∑–∞–≥—Ä—É–∂–µ–Ω (%d –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)", len(docs))
        except Exception as e:
            logger.warning("FAISS –∏–Ω–¥–µ–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω/–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å: %s", e)
            logger.info("–ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –ø–æ–∏—Å–∫ –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–æ —Å–±–æ—Ä–∫–∏ –∏–Ω–¥–µ–∫—Å–∞.")
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∏–Ω–¥–µ–∫—Å–æ–º: %s", e)

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()

if __name__ == "__main__":
    main()
