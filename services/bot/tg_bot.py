#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from services.auth.auth import create_jwt, exchange_jwt_for_iam_token
from settings import TELEGRAM_TOKEN, ORCH_URL
import requests
from rag_yandex_nofaiss import async_answer_user_query, build_index_from_bucket
from logging_conf import setup_logging
setup_logging()

import logging
logger = logging.getLogger(__name__)


# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ)
user_states = {}

DISCLAIMER = """
‚ö†Ô∏è –í–ê–ñ–ù–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï ‚ö†Ô∏è

üö´ –ß—Ä–µ–∑–º–µ—Ä–Ω–æ–µ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∞–ª–∫–æ–≥–æ–ª—è –≤—Ä–µ–¥–∏—Ç –≤–∞—à–µ–º—É –∑–¥–æ—Ä–æ–≤—å—é
üö´ –ê–ª–∫–æ–≥–æ–ª—å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω –ª–∏—Ü–∞–º –¥–æ 18 –ª–µ—Ç
üö´ –ë–µ—Ä–µ–º–µ–Ω–Ω—ã–º –∏ –∫–æ—Ä–º—è—â–∏–º –∂–µ–Ω—â–∏–Ω–∞–º
üö´ –õ–∏—Ü–∞–º —Å –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º–∏, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω –∞–ª–∫–æ–≥–æ–ª—å

‚ö° –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö
‚ö° –ú—ã –Ω–µ –ø—Ä–∏–∑—ã–≤–∞–µ–º –∫ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –∞–ª–∫–æ–≥–æ–ª—è
‚ö° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –∞–ª–∫–æ–≥–æ–ª—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ

–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã —Å —É—Å–ª–æ–≤–∏—è–º–∏, –Ω–∞–∂–º–∏—Ç–µ "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" üëá
"""

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        uid = update.effective_user.id
        user_states[uid] = {"disclaimer_shown": True, "accepted_disclaimer": False}

        keyboard = [["‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

        await update.message.reply_text(f"üç∏ –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò –ë–∞—Ä–º–µ–Ω!\n\n{DISCLAIMER}", reply_markup=reply_markup)
        logger.info("User %s started bot", uid)
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ start: %s", e)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    text = (update.message.text or "").strip()
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–∞–ø–∏—Å–∞–ª: %s", uid, text)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ—Ç
    if uid not in user_states:
        user_states[uid] = {"disclaimer_shown": False, "accepted_disclaimer": False}

        # –ï—Å–ª–∏ –¥–∏—Å–∫–ª–µ–π–º–µ—Ä –Ω–µ –ø—Ä–∏–Ω—è—Ç ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
    if not user_states[uid].get("accepted_disclaimer", False):
        if text == "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
            user_states[uid]["accepted_disclaimer"] = True
            keyboard = [["üçπ –ö–æ–∫—Ç–µ–π–ª–∏", "ü•§ –ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ"], ["üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "üìñ –†–µ—Ü–µ–ø—Ç—ã"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(
                "üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–∞—Ä–º–µ–Ω!\n\n"
                "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
                reply_markup=reply_markup
            )
            return
        elif text == "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è":
            await update.message.reply_text("üòî –ñ–∞–ª—å ‚Äî –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ /start")
            return
        else:
            keyboard = [["‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ —É—Å–ª–æ–≤–∏—è.", reply_markup=reply_markup)
            return

        # –ï—Å–ª–∏ –¥–∏—Å–∫–ª–µ–π–º–µ—Ä –ø—Ä–∏–Ω—è—Ç ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ RAG pipeline
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ ‚Äî –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø–æ–Ω—è—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        if text == "üçπ –ö–æ–∫—Ç–µ–π–ª–∏":
            query = "–ø–æ–¥–±–µ—Ä–∏ –∫–æ–∫—Ç–µ–π–ª—å –ø–æ –º–æ–µ–º—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é"
        elif text == "ü•§ –ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ":
            query = "–±–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã"
        elif text == "üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ":
            query = "–ø–æ–¥—Å–∫–∞–∂–∏ –Ω–∞–ø–∏—Ç–æ–∫ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é"
        elif text == "üìñ –†–µ—Ü–µ–ø—Ç—ã":
            query = "–¥–∞–π —Ä–µ—Ü–µ–ø—Ç –∫–æ–∫—Ç–µ–π–ª—è"
        else:
            query = text

        # –í—ã–∑–æ–≤ RAG pipeline (async wrapper)
        # async_answer_user_query –≤—ã–ø–æ–ª–Ω—è–µ—Ç pre/post –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –Ω–∞—Ö–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç—ã –≤ vectorstore
    try:
        r = requests.post(ORCH_URL, json={"user_id": uid, "text": text, "k": 3}, timeout=30)
        if r.status_code != 200:
            await update.message.reply_text("–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        j = r.json()
        if j.get("blocked"):
            await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –º–æ–≥—É –ø–æ–º–æ—á—å —Å —ç—Ç–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.")
            return
        # result contains rag / model output (raw)
        result = j.get("result", {})
        # RAG returns {'answer': model_json, 'retrieved': [...]}
        answer = result.get("answer")
        # If answer is JSON (raw model response) try to extract readable text:
        text_out = None
        if isinstance(answer, dict):
            # try to find string leaf
            def find_first(obj):
                if isinstance(obj, str): return obj
                if isinstance(obj, dict):
                    for v in obj.values():
                        s = find_first(v)
                        if s: return s
                if isinstance(obj, list):
                    for v in obj:
                        s = find_first(v)
                        if s: return s
                return None
            text_out = find_first(answer) or str(answer)
        else:
            text_out = str(answer)
        await update.message.reply_text(text_out)
    except Exception as e:
        logger.exception("Error sending to orchestrator: %s", e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É.")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    logger.info("üîß –°–æ–∑–¥–∞—é JWT –∏ –ø–æ–ª—É—á–∞—é IAM_TOKEN...")
    logger.info("üîë JWT —Å–æ–∑–¥–∞–Ω, IAM_TOKEN –ø–æ–ª—É—á–µ–Ω")
    build_index_from_bucket("vedroo", "")
    logger.info("üìö –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω –∏–∑ –±–∞–∫–µ—Ç–∞")
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("üç∏ –ò–ò –ë–∞—Ä–º–µ–Ω –∑–∞–ø—É—â–µ–Ω (polling)...")
    application.run_polling()

if __name__ == "__main__":
    main()